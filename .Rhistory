p=1
c= 4
Data <- GenerateComment(Data,
condition = Data[Data$Site == s & Data$CensusYear == y
& Data$Plot == p & Data$SubPlot == c
& Data$TreeFieldNum %in% duplicated_num],
comment = "Duplicate TreeFieldNum in the same Plot and SubPlot")
devtools::load_all(".")
devtools::load_all(".")
Data <- GenerateComment(Data,
condition = Data[Data$Site == s & Data$CensusYear == y
& Data$Plot == p & Data$SubPlot == c
& Data$TreeFieldNum %in% duplicated_num],
comment = "Duplicate TreeFieldNum in the same Plot and SubPlot")
Data <- GenerateComment(Data,
condition = Data[Site == s & CensusYear == y
& Plot == p & SubPlot == c
& TreeFieldNum %in% duplicated_num],
comment = "Duplicate TreeFieldNum in the same Plot and SubPlot")
Data[Site == s & CensusYear == y
& Plot == p & SubPlot == c
& TreeFieldNum %in% duplicated_num]
duplicated_num <- unique(num[duplicated(num)])
num <- Data[Data$Site == s & Data$CensusYear == y
& Data$Plot == p & Data$SubPlot == c,]$TreeFieldNum # all the TreeFieldNum for each Plot-SubPlot combination
duplicated_num <- unique(num[duplicated(num)])
Data <- GenerateComment(Data,
condition = Data[Site == s & CensusYear == y
& Plot == p & SubPlot == c
& TreeFieldNum %in% duplicated_num],
comment = "Duplicate TreeFieldNum in the same Plot and SubPlot")
Data[Site == s & CensusYear == y
& Plot == p & SubPlot == c
& TreeFieldNum %in% duplicated_num]
Data[Site == s & CensusYear == y
& Plot == p & SubPlot == c
& TreeFieldNum %in% duplicated_num]
Data[Site == s & CensusYear == y
& Plot == p & SubPlot == c
& TreeFieldNum %in% duplicated_num]
which(Data[Site == s & CensusYear == y
& Plot == p & SubPlot == c
& TreeFieldNum %in% duplicated_num])
Data$Site == s & Data$CensusYear == y
& Data$Plot == p & Data$SubPlot == c
Data$Site == s & Data$CensusYear == y
& Data$Plot == p & Data$SubPlot == c
Data[,Site] == s & Data[,CensusYear] == y
Data[,TreeFieldNum] %in% duplicated_num
Data <- GenerateComment(Data,
condition = Data[,Site] == s & Data[,CensusYear] == y
& Data[,Plot] == p & Data[,SubPlot] == c
& Data[,TreeFieldNum] %in% duplicated_num,
comment = "Duplicate TreeFieldNum in the same Plot and SubPlot")
View(Data)
duplicated_ID <- CorresIDs <- vector("character")
# For each site
for (s in unique(na.omit(Data$Site))) {
correspondances <- na.omit(unique(
Data[Data$Site == s, .(IdTree, Plot, SubPlot, TreeFieldNum)] # & Data$CensusYear == y
))
CorresIDs <- correspondances[, IdTree] # .(IdTree) all the Idtree's having a unique P-SubP-TreeFieldNum combination
if(!identical(CorresIDs, unique(CorresIDs))){ # check if it's the same length, same ids -> 1 asso/ID
duplicated_ID <- unique(CorresIDs[duplicated(CorresIDs)]) # identify the Idtree(s) having several P-SubP-TreeFieldNum combinations
Data <- GenerateComment(Data,
condition =
Data[,Site] == s
& Data[,IdTree] %in% duplicated_ID,
comment = "Non-unique association of the IdTree with Plot, SubPlot and TreeFieldNum")
# Data[Data$Site == s & Data$IdTree %in% duplicated_ID,
#      Comment := "Non-unique association of the IdTree with Plot, SubPlot and TreeFieldNum"]
}
} # end site loop
unique(Data[Comment == "Non-unique association of the IdTree with Plot, SubPlot and TreeFieldNum",
.(IdTree, Plot, SubPlot, TreeFieldNum)]) # to check
unique(Data[Comment %in% "Non-unique association of the IdTree with Plot, SubPlot and TreeFieldNum",
.(IdTree, Plot, SubPlot, TreeFieldNum)]) # to check
unique(Data["Non-unique association of the IdTree with Plot, SubPlot and TreeFieldNum"  %in% Comment,
.(IdTree, Plot, SubPlot, TreeFieldNum)]) # to check
unique(Data["Non-unique association of the IdTree with Plot, SubPlot and TreeFieldNum" %in% Comment,
.(IdTree, Plot, SubPlot, TreeFieldNum, Comment)]) # to check
unique(Data[IdTree %in% duplicated_ID,
.(IdTree, Plot, SubPlot, TreeFieldNum, Comment)]) # to check
IdTree
# Create "SitYearID" = "Site/CensusYear/IdTree"
Data[, SitYearID := paste(Site, CensusYear, IdTree, sep = "/")]
# if any duplicats in this col
if(anyDuplicated(Data$SitYearID) != 0){
# For each site
for (s in unique(na.omit(Data$Site))) {
# For each census
for (y in unique(na.omit(Data$CensusYear))) {
ids <- Data[Data$Site == s & Data$CensusYear == y,]$IdTree # all the IdTree for each Site and CensusYear combination
# if there are several IdTree per Site and CensusYear combination
if(anyDuplicated(ids) != 0){
duplicated_ids <- unique(num[duplicated(ids)])
Data <- GenerateComment(Data,
condition =
Data[,Site] == s & Data[,CensusYear] == y
& Data[,IdTree] %in% duplicated_ids,
comment = "Duplicated IdTree in the census")
}
}
}
}
# Create "SitYearID" = "Site/CensusYear/IdTree"
Data[, SitYearID := paste(Site, CensusYear, IdTree, sep = "/")]
duplicated_ids <- ids <- vector("character")
# if any duplicats in this col
if(anyDuplicated(Data$SitYearID) != 0){
# For each site
for (s in unique(na.omit(Data$Site))) {
# For each census
for (y in unique(na.omit(Data$CensusYear))) {
ids <- Data[Data$Site == s & Data$CensusYear == y,]$IdTree # all the IdTree for each Site and CensusYear combination
# if there are several IdTree per Site and CensusYear combination
if(anyDuplicated(ids) != 0){
duplicated_ids <- unique(num[duplicated(ids)])
Data <- GenerateComment(Data,
condition =
Data[,Site] == s & Data[,CensusYear] == y
& Data[,IdTree] %in% duplicated_ids,
comment = "Duplicated IdTree in the census")
}
}
}
}
# Create "SitYearID" = "Site/CensusYear/IdTree"
Data[, SitYearID := paste(Site, CensusYear, IdTree, sep = "/")]
duplicated_ids <- ids <- vector("character")
# if any duplicats in this col
if(anyDuplicated(Data$SitYearID) != 0){
# For each site
for (s in unique(na.omit(Data$Site))) {
# For each census
for (y in unique(na.omit(Data$CensusYear))) {
ids <- Data[Data$Site == s & Data$CensusYear == y,]$IdTree # all the IdTree for each Site and CensusYear combination
# if there are several IdTree per Site and CensusYear combination
if(anyDuplicated(ids) != 0){
duplicated_ids <- unique(ids[duplicated(ids)])
Data <- GenerateComment(Data,
condition =
Data[,Site] == s & Data[,CensusYear] == y
& Data[,IdTree] %in% duplicated_ids,
comment = "Duplicated IdTree in the census")
}
}
}
}
Data[IdTree == duplicated_ids,.(CensusYear, Plot, SubPlot, TreeFieldNum)] # to check (1 duplicate)
Data[IdTree == duplicated_ids,.(CensusYear, Plot, SubPlot, TreeFieldNum, IdTree)] # to check
## code to prepare `StandardData` dataset goes here
#### Packages libraries ####
library(TreeData)
library(data.table)
#### Import data ####
data("ParacouSubset") # import data
Data = ParacouSubset
## data.frame to data.table
setDT(Data) # with "set" "<-" is not necessary
#### Delete some columns ####
# Data[, CircCorr := NULL] # je les garde pour l'instant pour comparer avec mes corrections
# Data[, CorrCode := NULL]
#### Columns renaming ####
# setnames(Data, "old", "new")
Data <- setnames(Data, "Forest", "Site")
Data[, Plot := NULL]
Data <- setnames(Data, "SubPlot", "Plot")
Data <- setnames(Data, "SubSubPlot", "SubPlot")
Data <- setnames(Data, "CodeAlive", "LifeStatus")
Data <- setnames(Data, "idTree", "IdTree")
#### Circ to DBH ####
if (!"DBH" %in% names(Data) & "Circ" %in% names(Data)) {
Data[, DBH := Circ/pi]
}
#### Necessary columns creation from the existing ####
# ScientificName (if Genus & Species exist)
if(!"ScientificName" %in% names(Data) & all(c("Genus", "Species") %in% names(Data))){ # or ScientificName == "none"
Data[, ScientificName := paste(Genus, Species)]
}
#### Class changing ####
### as.character
CharacVar <- c("Plot", "SubPlot", "TreeFieldNum", "IdTree", "ScientificName", "VernName", "Family", "Genus", "Species") # character variables
Data[, (CharacVar) := lapply(.SD, as.character), .SDcols = CharacVar] # (CharacVar) to say that these are existing columns and not new ones to create
### as.numeric
NumVar <- c("CensusYear", "DBH", "PlotArea", "Xutm", "Yutm") # numeric variables
Data[, (NumVar) := lapply(.SD, as.character), .SDcols = NumVar] # first as c haracter when the variable is in factor, to preserve writed information
Data[, (NumVar) := lapply(.SD, as.numeric), .SDcols = NumVar] # () to say that these are existing columns and not new ones to create
### as.logical
LogicVar <- c("LifeStatus", "CommercialSp") # logical variables
Data[, (LogicVar) := lapply(.SD, as.logical), .SDcols = LogicVar] # () to say that these are existing columns and not new ones to create
#### Save this test data in the package ####
StandardData <- Data
usethis::use_data(StandardData, overwrite = TRUE)
## code to prepare `TestData` dataset goes here
#### Packages libraries ####
library(TreeData)
library(data.table)
#### Import data ####
data("StandardData") # import data
Data = StandardData
## data.frame to data.table
setDT(Data) # with "set" "<-" is not necessary
nError <- 1 # number of error to add for each case
#### Tree size = 0 ####
modif <- Data[, .I[sample(.N, nError)]] # .I = seq_len(nrow(Data)), .N = nrows in the group -> sample 2 rows number in Data
Data[modif, DBH := 0]
# Data[modif] # to check
#### Missing coordinates ####
modif <- Data[, .I[sample(.N, nError)]] # .I = seq_len(nrow(Data)), .N = nrows in the group -> sample 2 rows number in Data
Data[modif, Xutm := NA]
Data[modif, Yutm := NA]
# Data[modif] # to check
#### Other missing values ####
Vars <- c("PlotArea", "Plot", "SubPlot", "CensusYear", "TreeFieldNum", "IdTree",
"DBH", "LifeStatus", "MeasCode", "Family", "Genus", "Species",
"VernName", "ScientificName", "CommercialSp")
modifs <- c()
for (v in 1:length(Vars)) {
modif <- Data[, .I[sample(.N, nError)]] # .I = seq_len(nrow(Data)), .N = nrows in the group -> sample 2 rows number in Data
Data[modif, Vars[v] := NA]
modifs <- c(modifs, modif)
}
# Data[modifs] # to check
#### Size with bad precision (pas .0 ou .5) ####
wrong <- c(0.2, 0.3, 0.569, 0.8)
modif <- Data[, .I[sample(.N, nError)]]
Data[modif, DBH := DBH + sample(wrong,1)]
# Data[modif] # to check
#### Resurrected tree ####
Last_census <- Data[CensusYear == 2020]
Previous_census <- Data[CensusYear == 2019]
# See if a resurrected tree already exists
MortPrev <- Previous_census[LifeStatus == 0 & IdTree %in% Last_census[LifeStatus == 1, IdTree], IdTree]
# dead in 2019, alive in 2020
Previous_census[IdTree == 101410] # dead
Last_census[IdTree == 101410] # alive
#### Duplicated TreeFieldNum in plot-subplot association ####
modif <- Data[, .I[sample(.N, nError)]] # 1 row to change
duplicatedFieldNum <- Data[!(row.names(Data)) %in% modif & # all rows != modif
Plot == Data[modif, Plot] & # same plot as modif
SubPlot == Data[modif, SubPlot], # same subplot as modif
sample(TreeFieldNum,1)] # 1 TreeFieldNum to duplicate
Data[modif, TreeFieldNum := duplicatedFieldNum] # on the row to modif, we duplicate the TreeFieldNum
# Data[TreeFieldNum == duplicatedFieldNum] # to check
#### Duplicated IdTree in a census ####
idModif <- Last_census[, sample(IdTree, nError)] # selectionner 1 IdTree (de 2019) à modifier
duplicatedID <- Last_census[!(IdTree %in% idModif), sample(IdTree, 1)] # select 1 (2019) IdTree != modif to duplicate
Data[IdTree %in% idModif, IdTree := duplicatedID] # we duplicate the IdTree on the previous selected IdTree
Data[CensusYear == 2020 & IdTree == duplicatedID] # to check
#### Unseen tree but alive tree after ####
#### Abnomal growth ####
#### Abnomal recruit ####
#### Save this test data in the package ####
TestData <- Data
usethis::use_data(TestData, overwrite = TRUE)
Data[, CensusYear = arrange(CensusYear)]
Data[, CensusYear := arrange(CensusYear)]
Data[IdTree == duplicated_ids,.(sort(CensusYear), Plot, SubPlot, TreeFieldNum, IdTree)] # to check arrange
Data[IdTree == duplicated_ids,.(CensusYear = sort(CensusYear), Plot, SubPlot, TreeFieldNum, IdTree)] # to check arrange
duplicated_ids
# Create "SitYearID" = "Site/CensusYear/IdTree"
Data[, SitYearID := paste(Site, CensusYear, IdTree, sep = "/")]
duplicated_ids <- ids <- vector("character")
# if any duplicats in this col
if(anyDuplicated(Data$SitYearID) != 0){
# For each site
for (s in unique(na.omit(Data$Site))) {
# For each census
for (y in unique(na.omit(Data$CensusYear))) {
ids <- Data[Data$Site == s & Data$CensusYear == y,]$IdTree # all the IdTree for each Site and CensusYear combination
# if there are several IdTree per Site and CensusYear combination
if(anyDuplicated(ids) != 0){
duplicated_ids <- unique(ids[duplicated(ids)])
Data <- GenerateComment(Data,
condition =
Data[,Site] == s & Data[,CensusYear] == y
& Data[,IdTree] %in% duplicated_ids,
comment = "Duplicated IdTree in the census")
}
} # end year loop
} # end site loop
}
Data[IdTree == duplicated_ids,.(CensusYear = sort(CensusYear), Plot, SubPlot, TreeFieldNum, IdTree)] # to check
Data[IdTree == duplicated_ids,.(CensusYear = sort(CensusYear), Plot, SubPlot, TreeFieldNum, IdTree, Comment)] # to check
duplicated_ID <- CorresIDs <- vector("character")
# For each site
for (s in unique(na.omit(Data$Site))) {
correspondances <- na.omit(unique(
Data[Data$Site == s, .(IdTree, Plot, SubPlot, TreeFieldNum)] # & Data$CensusYear == y
))
CorresIDs <- correspondances[, IdTree] # .(IdTree) all the Idtree's having a unique P-SubP-TreeFieldNum combination
if(!identical(CorresIDs, unique(CorresIDs))){ # check if it's the same length, same ids -> 1 asso/ID
duplicated_ID <- unique(CorresIDs[duplicated(CorresIDs)]) # identify the Idtree(s) having several P-SubP-TreeFieldNum combinations
Data <- GenerateComment(Data,
condition =
Data[,Site] == s
& Data[,IdTree] %in% duplicated_ID,
comment = "Non-unique association of the IdTree with Plot, SubPlot and TreeFieldNum")
}
} # end site loop
unique(Data[IdTree %in% duplicated_ID,
.(IdTree, Plot, SubPlot, TreeFieldNum, Comment)]) # to check
# Create "SitYearID" = "Site/CensusYear/IdTree"
Data[, SitYearID := paste(Site, CensusYear, IdTree, sep = "/")]
duplicated_ids <- ids <- vector("character")
# if any duplicats in this col
if(anyDuplicated(Data$SitYearID) != 0){
# For each site
for (s in unique(na.omit(Data$Site))) {
# For each census
for (y in unique(na.omit(Data$CensusYear))) {
ids <- Data[Data$Site == s & Data$CensusYear == y,]$IdTree # all the IdTree for each Site and CensusYear combination
# if there are several IdTree per Site and CensusYear combination
if(anyDuplicated(ids) != 0){
duplicated_ids <- unique(ids[duplicated(ids)])
Data <- GenerateComment(Data,
condition =
Data[,Site] == s & Data[,CensusYear] == y
& Data[,IdTree] %in% duplicated_ids,
comment = "Duplicated IdTree in the census")
}
} # end year loop
} # end site loop
}
Data[IdTree == duplicated_ids,.(CensusYear = sort(CensusYear), Plot, SubPlot, TreeFieldNum, IdTree, Comment)] # to check
devtools::load_all(".")
knitr::opts_chunk$set(echo = TRUE)
library(TreeData)
library(data.table)
data("TestData") # import data
# INPUTS
Data = TestData
## data.frame to data.table
setDT(Data) # with "set" "<-" is not necessary
if(anyDuplicated(Data) != 0)
unique(Data)
# Check bota : Family/Genus/Species/ScientificName/VernName
# Check size : DBH, POM(?)
Vars <- c("Plot", "SubPlot", "CensusYear", "TreeFieldNum", "IdTree",
"DBH", "POM", "TreeHeight", "StemHeight", "MeasCode",
"Xutm", "Yutm", "Family", "Genus", "Species", "VernName")
for (v in 1:length(Vars)) {
if(Vars[v] %in% names(Data)){ # If the column exists
Data <- GenerateComment(Data,
condition = is.na(Data[,get(Vars[v])]),
comment = paste0("Missing value in ", Vars[v]))
}
}
Data[Comment != ""] # to check (13 comments)
Vars <- c("DBH", "POM", "TreeHeight", "StemHeight")
for (v in 1:length(Vars)) {
if(Vars[v] %in% names(Data)){ # If the column exists
Data <- GenerateComment(Data,
condition = Data[,get(Vars[v])] == 0,
comment = paste0(Vars[v]," cannot be 0"))
}
}
Data[get(Vars) == 0] # to check
# Create "PlotSubNum" = "Site/CensusYear/Plot/SubPlot/TreeFieldNum"
Data[, PlotSubNum := paste(Site, CensusYear, Plot, SubPlot, TreeFieldNum, sep = "/")]
# y = 2019
# p=1
# c= 4
duplicated_num <- num <- vector("character")
# if any duplicats in this col
if(anyDuplicated(Data$PlotSubNum) != 0) {
# For each site
for (s in unique(na.omit(Data$Site))) {
# For each census
for (y in unique(na.omit(Data$CensusYear))) {
# For each plot
for (p in unique(na.omit(Data$Plot))) {
# For each SubPlot in this plot
for (c in unique(na.omit(Data[Data$Plot==p, "SubPlot"]))) {
num <- Data[Data$Site == s & Data$CensusYear == y
& Data$Plot == p & Data$SubPlot == c,]$TreeFieldNum # all the TreeFieldNum for each Plot-SubPlot combination
# if there are several TreeFieldNum per Plot-SubPlot combination
if(anyDuplicated(num) != 0){
duplicated_num <- unique(num[duplicated(num)])
Data <- GenerateComment(Data,
condition =
Data[,Site] == s & Data[,CensusYear] == y
& Data[,Plot] == p & Data[,SubPlot] == c
& Data[,TreeFieldNum] %in% duplicated_num,
comment = "Duplicate TreeFieldNum in the same Plot and SubPlot")
}
} # end subplot loop
} # end plot loop
} # end year loop
} # end site loop
}
Data[TreeFieldNum == duplicated_num,.(Plot, SubPlot, TreeFieldNum)] # to check (1 duplicate)
Data[TreeFieldNum == duplicated_num,.(CensusYear = sort(CensusYear), Plot, SubPlot, TreeFieldNum, Comment)] # to check (1 duplicate)
View(Data)
# y = 2019
# p=1
# c= 4
duplicated_num <- num <- vector("character")
# if any duplicats in this col
if(anyDuplicated(Data$PlotSubNum) != 0) {
# For each site
for (s in unique(na.omit(Data$Site))) {
# For each census
for (y in unique(na.omit(Data$CensusYear))) {
# For each plot
for (p in unique(na.omit(Data$Plot))) {
# For each SubPlot in this plot
for (c in unique(na.omit(Data[Data$Plot==p, "SubPlot"]))) {
num <- Data[Data$Site == s & Data$CensusYear == y
& Data$Plot == p & Data$SubPlot == c,]$TreeFieldNum # all the TreeFieldNum for each Plot-SubPlot combination
# if there are several TreeFieldNum per Plot-SubPlot combination
if(anyDuplicated(num) != 0){
duplicated_num <- unique(num[duplicated(num)])
Data <- GenerateComment(Data,
condition =
Data[,Site] == s & Data[,CensusYear] == y
& Data[,Plot] == p & Data[,SubPlot] == c
& Data[,TreeFieldNum] %in% duplicated_num,
comment = "Duplicate TreeFieldNum in the same Plot and SubPlot")
}
} # end subplot loop
} # end plot loop
} # end year loop
} # end site loop
}
Data[TreeFieldNum == duplicated_num,.(CensusYear = sort(CensusYear), Plot, SubPlot, TreeFieldNum, Comment)] # to check (1 duplicate)
y = 2019
p=1
c= 4
num <- Data[Data$Site == s & Data$CensusYear == y
& Data$Plot == p & Data$SubPlot == c,]$TreeFieldNum # all the TreeFieldNum for each Plot-SubPlot combination
num
anyDuplicated(num)
duplicated_num
# Create "PlotSubNum" = "Site/CensusYear/Plot/SubPlot/TreeFieldNum"
Data[, PlotSubNum := paste(Site, CensusYear, Plot, SubPlot, TreeFieldNum, sep = "/")]
# y = 2019
# p=1
# c= 4
duplicated_num <- num <- vector("character")
# if any duplicats in this col
if(anyDuplicated(Data$PlotSubNum) != 0) {
# For each site
for (s in unique(na.omit(Data$Site))) {
# For each census
for (y in unique(na.omit(Data$CensusYear))) {
# For each plot
for (p in unique(na.omit(Data$Plot))) {
# For each SubPlot in this plot
for (c in unique(na.omit(Data[Data$Plot==p, "SubPlot"]))) {
num <- Data[Data$Site == s & Data$CensusYear == y
& Data$Plot == p & Data$SubPlot == c,]$TreeFieldNum # all the TreeFieldNum for each Plot-SubPlot combination
# if there are several TreeFieldNum per Plot-SubPlot combination
if(anyDuplicated(num) != 0){
duplicated_num <- unique(num[duplicated(num)])
Data <- GenerateComment(Data,
condition =
Data[,Site] == s & Data[,CensusYear] == y
& Data[,Plot] == p & Data[,SubPlot] == c
& Data[,TreeFieldNum] %in% duplicated_num,
comment = "Duplicate TreeFieldNum in the same Plot and SubPlot")
}
} # end subplot loop
} # end plot loop
} # end year loop
} # end site loop
}
Data[TreeFieldNum == duplicated_num,.(CensusYear = sort(CensusYear), Plot, SubPlot, TreeFieldNum, Comment)] # to check (1 duplicate)
duplicated_ID <- CorresIDs <- vector("character")
# For each site
for (s in unique(na.omit(Data$Site))) {
correspondances <- na.omit(unique(
Data[Data$Site == s, .(IdTree, Plot, SubPlot, TreeFieldNum)] # & Data$CensusYear == y
))
CorresIDs <- correspondances[, IdTree] # .(IdTree) all the Idtree's having a unique P-SubP-TreeFieldNum combination
if(!identical(CorresIDs, unique(CorresIDs))){ # check if it's the same length, same ids -> 1 asso/ID
duplicated_ID <- unique(CorresIDs[duplicated(CorresIDs)]) # identify the Idtree(s) having several P-SubP-TreeFieldNum combinations
Data <- GenerateComment(Data,
condition =
Data[,Site] == s
& Data[,IdTree] %in% duplicated_ID,
comment = "Non-unique association of the IdTree with Plot, SubPlot and TreeFieldNum")
}
} # end site loop
unique(Data[IdTree %in% duplicated_ID,
.(IdTree, Plot, SubPlot, TreeFieldNum, Comment)]) # to check
unique(Data[IdTree %in% duplicated_ID,
.(IdTree = sort(IdTree), Plot, SubPlot, TreeFieldNum, Comment)]) # to check
# Create "SitYearID" = "Site/CensusYear/IdTree"
Data[, SitYearID := paste(Site, CensusYear, IdTree, sep = "/")]
duplicated_ids <- ids <- vector("character")
# if any duplicats in this col
if(anyDuplicated(Data$SitYearID) != 0){
# For each site
for (s in unique(na.omit(Data$Site))) {
# For each census
for (y in unique(na.omit(Data$CensusYear))) {
ids <- Data[Data$Site == s & Data$CensusYear == y,]$IdTree # all the IdTree for each Site and CensusYear combination
# if there are several IdTree per Site and CensusYear combination
if(anyDuplicated(ids) != 0){
duplicated_ids <- unique(ids[duplicated(ids)])
Data <- GenerateComment(Data,
condition =
Data[,Site] == s & Data[,CensusYear] == y
& Data[,IdTree] %in% duplicated_ids,
comment = "Duplicated IdTree in the census")
}
} # end year loop
} # end site loop
}
Data[IdTree == duplicated_ids,.(CensusYear = sort(CensusYear), Plot, SubPlot, TreeFieldNum, IdTree, Comment)] # to check
