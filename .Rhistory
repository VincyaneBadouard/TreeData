RequiredFormat(ParacouSubsetWide,
Plot = "SubPlot",
SubPlot = "SubSubPlot",
Time = c("2016","2017","2018","2019","2020"),
IdTree = "idTree",
LifeStatus = NULL,
Size = "Circ",
SizeUnit = NULL,
POM = "MeasCode",
POMUnit = NULL,
PlotArea = "PlotArea",
X = "Xutm",
Y = "Yutm",
ScientificName = NULL,
VernName = NULL,
Family = "Family",
Genus = "Genus",
Species = "Species",
CommercialSp = "CommercialSp",
TreeHeight = NULL,
TreeHeightUnit = NULL)
RequiredFormat(ParacouSubsetWide,
Plot = "SubPlot",
SubPlot = "SubSubPlot",
Time = c("2016","2017","2018","2019","2020"),
IdTree = "idTree",
LifeStatus = NULL,
Size = NULL,
SizeUnit = NULL,
POM = "MeasCode",
POMUnit = NULL,
PlotArea = "PlotArea",
X = "Xutm",
Y = "Yutm",
ScientificName = NULL,
VernName = NULL,
Family = "Family",
Genus = "Genus",
Species = "Species",
CommercialSp = "CommercialSp",
TreeHeight = NULL,
TreeHeightUnit = NULL)
RequiredFormat(ParacouSubsetWide,
Plot = "SubPlot",
SubPlot = "SubSubPlot",
Time = c("2016","2017","2018","2019","2020"),
IdTree = "idTree",
LifeStatus = NULL,
Size = NULL,
SizeUnit = NULL,
POM = NULL,
POMUnit = NULL,
PlotArea = "PlotArea",
X = "Xutm",
Y = "Yutm",
ScientificName = NULL,
VernName = NULL,
Family = "Family",
Genus = "Genus",
Species = "Species",
CommercialSp = "CommercialSp",
TreeHeight = NULL,
TreeHeightUnit = NULL)
RequiredFormat(ParacouSubsetWide,
Plot = "SubPlot",
SubPlot = NULL,
Time = c("2016","2017","2018","2019","2020"),
IdTree = "idTree",
LifeStatus = NULL,
Size = NULL,
SizeUnit = NULL,
POM = NULL,
POMUnit = NULL,
PlotArea = "PlotArea",
X = "Xutm",
Y = "Yutm",
ScientificName = NULL,
VernName = NULL,
Family = "Family",
Genus = "Genus",
Species = "Species",
CommercialSp = "CommercialSp",
TreeHeight = NULL,
TreeHeightUnit = NULL)
Data = ParacouSubsetWide
Plot = "SubPlot"
SubPlot = NULL
Time = c("2016","2017","2018","2019","2020")
IdTree = "idTree"
LifeStatus = NULL
Size = "Circ"
SizeUnit = NULL
POM = NULL
POMUnit = NULL
PlotArea = "PlotArea"
X = "Xutm"
Y = "Yutm"
ScientificName = NULL
VernName = NULL
Family = "Family"
Genus = "Genus"
Species = "Species"
CommercialSp = "CommercialSp"
TreeHeight = NULL
TreeHeightUnit = NULL
Data = ParacouSubsetWide
Plot = "SubPlot"
SubPlot = NULL
Time = c("2016","2017","2018","2019","2020")
IdTree = "idTree"
LifeStatus = NULL
Size = "Circ"
SizeUnit = NULL
POM = NULL
POMUnit = NULL
PlotArea = "PlotArea"
X = "Xutm"
Y = "Yutm"
ScientificName = NULL
VernName = NULL
Family = "Family"
Genus = "Genus"
Species = "Species"
CommercialSp = "CommercialSp"
TreeHeight = NULL
TreeHeightUnit = NULL
## Class
CharacVar <- c(Plot, SubPlot, IdTree, ScientificName, VernName, Family, Genus, Species) # character variables
CharacVar
for(v in 1:length(CharacVar))
Data[, get(CharacVar[v]) := as.character(get(CharacVar[v]))]
get(CharacVar[v])
v <- 1
get(CharacVar[v])
CharacVar[v]
as.character(get(CharacVar[v]))
CharacVar[v]
library(data.table)
Data[, get(CharacVar[v]) := as.character(get(CharacVar[v]))]
get(CharacVar[v])
Data[, CharacVar[v] := as.character(CharacVar[v])]
CharacVar[v]
Data[, SubPlot := as.character(SubPlot)]
knitr::opts_chunk$set(echo = TRUE)
Vars <- c(Plot, SubPlot, Time, TreeFieldNum, IdTree, LifeStatus, Size, POM, X, Y)
Vars <- c(Plot, SubPlot)
for (v in Vars) {
if(Vars[v] %in% names(Data)){ # If the column exists
MissingVal <- Data[is.na(get(Vars[v])) | get(Vars[v]) == 0, get(Vars[v])]
if(any(MissingVal)){ # but have NA values
Data[MissingVal, Comment := paste0("Missing value in ", Vars[v])] # comments
}
}
}
Vars[2]
Vars[1]
get(Vars[1])
CharacVar
Data[, get(CharacVar[v]) := as.character(get(CharacVar[v]))]
v <- 2
Data[, get(CharacVar[v]) := as.character(get(CharacVar[v]))]
View(Data)
Data[, idTree := as.character(idTree)]
Data[, c(CharacVar[v]) := as.character(get(CharacVar[v]))]
load("C:/Users/Utilisateur/AppData/Local/ProjetsR/TreeData/data/ParacouSubset.rda")
ParacouSubsetWide <- dcast(ParacouSubset, idTree ~ CensusYear, value.var = "Circ")
OtherCols <- copy(ParacouSubset)
OtherCols[, c("CensusYear", "CensusDate", "CensusDateCertainty",
"Circ", "CircCorr", "CorrCode",
"CodeAlive", "MeasCode") := NULL]
OtherCols
ParacouSubsetWide <- dcast(ParacouSubset, idTree ~ CensusYear, value.var = "Circ")
OtherCols <- copy(ParacouSubset)
OtherCols[, c("CensusYear", "CensusDate", "CensusDateCertainty","CircCorr", "CorrCode") := NULL]
ParacouSubsetWide <- unique(merge(ParacouSubsetWide, OtherCols, by = "idTree")) #1000 ind -> 1000 rows
usethis::use_data(ParacouSubsetWide, overwrite = TRUE)
names(ParacouSubsetWide)
ParacouSubsetWide <- dcast(ParacouSubset, idTree ~ CensusYear, value.var = "Circ")
OtherCols <- copy(ParacouSubset)
OtherCols[, c("CensusYear", "CensusDate", "CensusDateCertainty","CircCorr", "CorrCode") := NULL]
ParacouSubsetWide <- unique(merge(ParacouSubsetWide, OtherCols, by = "idTree")) #1000 ind -> 1000 rows
ParacouSubsetWide[, Circ := Circ/100] # cm -> m for the exemple
usethis::use_data(ParacouSubsetWide, overwrite = TRUE)
Data = ParacouSubsetWide
Plot = "SubPlot"
SubPlot = "SubSubPlot"
Time = c("2016","2017","2018","2019","2020")
IdTree = "idTree"
LifeStatus = "CodeAlive"
Size = "Circ"
SizeUnit = "m"
POM = "MeasCode"
POMUnit = NULL
PlotArea = "PlotArea"
X = "Xutm"
Y = "Yutm"
ScientificName = NULL
VernName = NULL
Family = "Family"
Genus = "Genus"
Species = "Species"
CommercialSp = "CommercialSp"
TreeHeight = NULL
TreeHeightUnit = NULL
library(TreeData)
data(ParacouSubsetWide)
RequiredFormat(ParacouSubsetWide,
Plot = "SubPlot",
SubPlot = "SubSubPlot",
Time = c("2016","2017","2018","2019","2020"),
IdTree = "idTree",
LifeStatus = "CodeAlive",
Size = "Circ",
SizeUnit = "m",
POM = "MeasCode",
POMUnit = NULL,
PlotArea = "PlotArea",
X = "Xutm",
Y = "Yutm",
ScientificName = NULL,
VernName = "VernName",
Family = "Family",
Genus = "Genus",
Species = "Species",
CommercialSp = "CommercialSp",
TreeHeight = NULL,
TreeHeightUnit = NULL)
library(TreeData)
data(ParacouSubsetWide)
Required_Format <- RequiredFormat(
ParacouSubsetWide,
Plot = "SubPlot",
SubPlot = "SubSubPlot",
Time = c("2016","2017","2018","2019","2020"),
IdTree = "idTree",
LifeStatus = "CodeAlive",
Size = "Circ",
SizeUnit = "m",
POM = "MeasCode",
POMUnit = NULL,
PlotArea = "PlotArea",
X = "Xutm",
Y = "Yutm",
ScientificName = NULL,
VernName = "VernName",
Family = "Family",
Genus = "Genus",
Species = "Species",
CommercialSp = "CommercialSp",
TreeHeight = NULL,
TreeHeightUnit = NULL)
View(Required_Format)
View(Data)
View(ParacouSubsetWide)
library(TreeData)
Required_Format <- RequiredFormat(
ParacouSubsetWide,
Plot = "SubPlot",
SubPlot = "SubSubPlot",
Time = c("2016","2017","2018","2019","2020"),
IdTree = "idTree",
LifeStatus = "CodeAlive",
Size = "Circ",
SizeUnit = "m",
POM = "MeasCode",
POMUnit = "code",
PlotArea = "PlotArea",
X = "Xutm",
Y = "Yutm",
ScientificName = NULL,
VernName = "VernName",
Family = "Family",
Genus = "Genus",
Species = "Species",
CommercialSp = "CommercialSp",
TreeHeight = NULL,
TreeHeightUnit = NULL)
library(TreeData)
Required_Format <- RequiredFormat(
ParacouSubsetWide,
Plot = "SubPlot",
SubPlot = "SubSubPlot",
Time = c("2016","2017","2018","2019","2020"),
IdTree = "idTree",
LifeStatus = "CodeAlive",
Size = "Circ",
SizeUnit = "m",
POM = "MeasCode",
POMUnit = "code",
PlotArea = "PlotArea",
X = "Xutm",
Y = "Yutm",
ScientificName = NULL,
VernName = "VernName",
Family = "Family",
Genus = "Genus",
Species = "Species",
CommercialSp = "CommercialSp",
TreeHeight = NULL,
TreeHeightUnit = NULL)
View(Required_Format)
PlotArea <- 6
Data[,  c(PlotArea) := PlotArea]
View(Data)
View(Data)
Data[,  c(PlotArea) := PlotArea]
Data
PlotArea <- 20
Data[,  c(PlotArea) := PlotArea]
Data
PlotArea
c(PlotArea) := PlotArea
Data[,  c(try) := PlotArea]
Data[,  try := PlotArea]
Data
Data[, PlotArea := NULL]
Data
Data[,  PlotArea := PlotArea]
Data
!PlotArea %in% names(Data)
Data[,  PlotArea := NULL]
!PlotArea %in% names(Data)
PlotArea
!PlotArea %in% names(Data) & is.numeric(PlotArea)
Data = ParacouSubsetWide
Data = ParacouSubsetWide
library(TreeData)
data(ParacouSubsetWide)
Data = ParacouSubsetWide
data(ParacouSubsetWide)
Data = ParacouSubsetWide
Plot = "SubPlot"
SubPlot = "SubSubPlot"
Time = c("2016","2017","2018","2019","2020")
TreeFieldNum = "TreeFieldNum"
IdTree = "idTree"
LifeStatus = "CodeAlive"
Size = "Circ"
SizeUnit = "m"
POM = "MeasCode"
POMUnit = NULL
PlotArea = "PlotArea"
X = "Xutm"
Y = "Yutm"
ScientificName = NULL
VernName = NULL
Family = "Family"
Genus = "Genus"
Species = "Species"
CommercialSp = "CommercialSp"
TreeHeight = NULL
TreeHeightUnit = NULL
## data.frame to data.table
setDT(Data) # with "set" "<-" is not necessary
library(data.table)
## data.frame to data.table
setDT(Data) # with "set" "<-" is not necessary
!IdTree %in% names(Data)
IdTree %in% names(Data)
c(Plot, SubPlot, TreeFieldNum) %in% names(Data)
### IdTree (unique along Plot, SubPlot, TreeFieldNum)
Data[,  IdTree := NULL]
### IdTree (unique along Plot, SubPlot, TreeFieldNum)
Data[,  idTree := NULL]
!IdTree %in% names(Data) & c(Plot, SubPlot, TreeFieldNum) %in% names(Data)
IdTree %in% names(Data)
Data[,  IdTree := seq(1, nrow()), by = c(Plot, SubPlot, TreeFieldNum)]
Data[,  IdTree := seq(1, nrow(Data)), by = c(Plot, SubPlot, TreeFieldNum)]
Data[,  IdTree := seq(1, nrow(Data[,, by = c(Plot, SubPlot, TreeFieldNum)])), by = c(Plot, SubPlot, TreeFieldNum)]
View(Data)
uniq_key <- unique(Data, by = c(Plot, SubPlot, TreeFieldNum))
View(uniq_key)
uniq_key[,  IdTree := seq(1, nrow(uniq_key))]
View(uniq_key)
uniq_key <- unique(Data, .(Plot, SubPlot, TreeFieldNum))
uniq_key <- unique(Data, c(Plot, SubPlot, TreeFieldNum))
uniq_key[, c(Plot, SubPlot, TreeFieldNum, IdTree)]
uniq_key[, .(Plot, SubPlot, TreeFieldNum, IdTree)]
View(uniq_key)
beta <- uniq_key[, .(Plot, SubPlot, TreeFieldNum, IdTree)]
View(beta)
beta <- uniq_key[, .(Plot, SubPlot, TreeFieldNum, IdTree), with = FALSE]
Plot
SubPlot
TreeFieldNum
IdTree
uniq_key <- unique(Data[, c(Plot, SubPlot, TreeFieldNum), with = FALSE])
View(uniq_key)
uniq_key[, IdTree := seq(1, nrow(uniq_key))]
View(uniq_key)
merge(Data, uniq_key)
dt = data.table(x = 1:3, y = 2:4)
arg = 'x'
dt[, 3*get( arg)]        # [1] 3 6 9 It works
# But if the argument has the same name as a column:
y = 'y' #  y is a function argument too
dt[, 3*get( y)]      # Error in get(y) : invalid first argument
data(ParacouSubsetWide)
Data = ParacouSubsetWide
Plot = "SubPlot"
SubPlot = "SubSubPlot"
Time = c("2016","2017","2018","2019","2020")
TreeFieldNum = "TreeFieldNum"
IdTree = "idTree"
LifeStatus = "CodeAlive"
Size = "Circ"
SizeUnit = "m"
POM = "MeasCode"
POMUnit = NULL
PlotArea = "PlotArea"
X = "Xutm"
Y = "Yutm"
ScientificName = NULL
VernName = NULL
Family = "Family"
Genus = "Genus"
Species = "Species"
CommercialSp = "CommercialSp"
TreeHeight = NULL
TreeHeightUnit = NULL
## data.frame to data.table
setDT(Data) # with "set" "<-" is not necessary
## data.frame to data.table
setDT(Data) # with "set" "<-" is not necessary
Data[, test := paste(get(LifeStatus), get(POM), sep = "_"), with = F] # works
Data[, test := paste(get(LifeStatus), get(POM), sep = "_")] # works
View(Data)
Data[, ScientificName := paste(..Genus, ..Species, sep = "_")] # doesn't work
View(Data)
Data[, ScientificName := paste(eval(Genus), eval(Species), sep = "_")] # doesn't work
View(Data)
Data[, ScientificName := paste(get(Genus), get(Species), sep = "_")] # doesn't work
Data = ParacouSubsetWide
## data.frame to data.table
setDT(Data) # with "set" "<-" is not necessary
Data[, ScientificName := paste(Data[[Genus]], Data[[Species]], sep = "_")] # works
Genus
Species
Data[, ScientificName := paste(Data[[Genus]], Data[[Species]], sep = "_")] # works
View(Data)
Data$ScientificName <- paste(Data[[Genus]], Data[[Species]], sep = "_") # doesn't work
View(Data)
df1 <- data.table(sp = LETTERS[1:10], x = rnorm(10)) # cas où l'arg n'a pas le même nom que la col
df2 <- data.table(species = LETTERS[1:10], var = rnorm(10)) # cas où l'arg a le même nom que la col
fun <- function(df, species, var){
env <- lapply(list(.species = species, .var = var), as.name) # environment
eval(substitute(
{
df[, p := paste(.species, .var)]
df[, q := paste(.species,  "_", .var)]
}, env))
return(df)
}
fun(df1, "sp", "x") # cas où l'arg n'a pas le même nom que la col
df1
fun(df2, "species", "var") # cas où l'arg a le même nom que la col
df2
df1 <- data.table(sp = LETTERS[1:10], x = rnorm(10)) # cas où l'arg n'a pas le même nom que la col
df2 <- data.table(species = LETTERS[1:10], var = rnorm(10)) # cas où l'arg a le même nom que la col
# fun <- function(df, species, var){
#   env <- lapply(list(.species = species, .var = var), as.name) # environment
#   eval(substitute(
#       {
#       df[, p := paste(.species, .var)]
#       df[, q := paste(.species,  "_", .var)]
#     }, env))
#   return(df)
# }
fun <- function(df, species, var){
env <- lapply(list(species = species, var = var), as.name) # environment
eval(substitute(
{
df[, p := paste(species, var)]
df[, q := paste(species,  "_", var)]
}, env))
return(df)
}
fun(df1, "sp", "x") # cas où l'arg n'a pas le même nom que la col
df1
fun(df2, "species", "var") # cas où l'arg a le même nom que la col
df2
df1 <- data.table(sp = LETTERS[1:10], x = rnorm(10)) # cas où l'arg n'a pas le même nom que la col
library(data.table)
df1 <- data.table(sp = LETTERS[1:10], x = rnorm(10)) # cas où l'arg n'a pas le même nom que la col
df2 <- data.table(species = LETTERS[1:10], var = rnorm(10)) # cas où l'arg a le même nom que la col
env <- lapply(list(.species = species, .var = var), as.name) # environment
species = "species"
var = "var"
env <- lapply(list(.species = species, .var = var), as.name) # environment
env
eval(substitute(
{
df[, p := paste(.species, .var)]
df[, q := paste(.species,  "_", .var)] # le . devant le nom n'est pas nécessaire c'est juste mieux de distinguer pour le codeur
}, env))
df <- data.table(species = LETTERS[1:10], var = rnorm(10)) # cas où l'arg a le même nom que la col
eval(substitute(
{
df[, p := paste(.species, .var)]
df[, q := paste(.species,  "_", .var)] # le . devant le nom n'est pas nécessaire c'est juste mieux de distinguer pour le codeur
}, env))
df <- data.table(sp = LETTERS[1:10], x = rnorm(10)) # cas où l'arg n'a pas le même nom que la col
species = "sp"
var = "x"
env <- lapply(list(.species = species, .var = var), as.name) # environment
env
eval(substitute(
{
df[, p := paste(.species, .var)]
df[, q := paste(.species,  "_", .var)] # le . devant le nom n'est pas nécessaire c'est juste mieux de distinguer pour le codeur
}, env))
df
