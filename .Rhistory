# If 'POM' 'POM change' correction is advised
if((all(is.na(Data$HOM)) | !"HOM" %in% names(Data)) &
any(!is.na(Data$POM)) & !any(WhatToCorrect %in% "POM change")) # POM exists?
message("You have the 'POM' information in your dataset.
We advise you to correct your diameters also from the 'POM change' ('WhatToCorrect' argument)")
# 'POM change' correction needs 'POM' or 'HOM' values
if(!any(c("POM", "HOM") %in% names(Data)) | (all(is.na(Data$POM)) &  all(is.na(Data$HOM))) )
stop("You have chosen to make a 'POM change' correction,
but you do not have the necessary 'POM' or HOM' column in your dataset or they are empty")
# In data.table
setDT(Data)
Data <- unique(Data)   # if there are duplicate rows, delete them
if("LifeStatus_TreeDataCor" %in% names(Data)){ Status <- "LifeStatus_TreeDataCor"
}else if ("LifeStatusCor" %in% names(Data)){ Status <- "LifeStatusCor"
}else if ("LifeStatus" %in% names(Data)){ Status <- "LifeStatus"
}else{stop("You have chosen DBHCorForDeadTrees = FALSE.
To apply this choice the dataset must contain the column
'LifeStatus_TreeDataCor', 'LifeStatusCor' or 'LifeStatus'")}
if(DBHCorForDeadTrees == FALSE){
DeadTrees <- Data[get(Status) == FALSE]
Data <- Data[get(Status) == TRUE | is.na(get(Status))] # AliveTrees
# nrow(Data) == nrow(AliveTrees) + nrow(DeadTrees) # to check
}
# Remove duplicated measurements per Year because different POM or Date -----------------------------------
CompleteData <- copy(Data)
Data <- UniqueMeasurement(Data, KeepMeas = KeepMeas, ID = ID)
DuplicatedRows <- CompleteData[!Data, on = .NATURAL]
if(!"Comment" %in% names(Data)) Data[, Comment := ""]
if(DetectOnly %in% FALSE){
if(!"DiameterCorrectionMeth" %in% names(Data)) Data[, DiameterCorrectionMeth := ""]
}
# If no diameter value, write a comment
Data <- GenerateComment(Data,
condition = is.na(Data[, Diameter]),
comment = "Missing value in 'Diameter'")
# Order IDs and times in ascending order ----------------------------------------------------------------------------
Data <- Data[order(get(ID), Year)]
ID
Ids <- as.vector(na.omit(unique(Data[, get(ID)]))) # Tree Ids
# Dataset with the rows without IDS ----------------------------------------------------------------------------------
DataIDNa <- Data[is.na(get(ID))]
# Dataset with the rows without Year ----------------------------------------------------------------------------------
DataYearNa <- Data[is.na(Year)]
Ids
ID
i
# Apply for all the trees -----------------------------------------------------------------------------------------------
# i = "100635"
Data <- do.call(rbind, lapply(Ids, function(i) DiameterCorrectionByTree(
DataTree = Data[get(ID) %in% i & !is.na(Year)], # per ID, all censuses
Data = Data,
DefaultHOM = DefaultHOM,
MaxDBH = MaxDBH,
PositiveGrowthThreshold = PositiveGrowthThreshold,
NegativeGrowthThreshold = NegativeGrowthThreshold,
Pioneers = Pioneers,
PioneersGrowthThreshold = PioneersGrowthThreshold,
WhatToCorrect = WhatToCorrect,
CorrectionType = CorrectionType,
DBHRange = DBHRange,
MinIndividualNbr = MinIndividualNbr,
OtherCrit =  OtherCrit,
Digits = Digits,
coef = coef,
DetectOnly = DetectOnly
)
)) # do.call apply the 'rbind' to the lapply result
i
ID
Ids
i=Ids[1]
i
DataTree = Data[get(ID) %in% i & !is.na(Year)]
!"IdStem" %in% names(DataTree) | all(is.na(DataTree$IdStem))
"IdTree" %in% names(DataTree) & any(!is.na(DataTree$IdTree))
(!"IdStem" %in% names(DataTree) | all(is.na(DataTree$IdStem))) &
("IdTree" %in% names(DataTree) & any(!is.na(DataTree$IdTree)))
ID
# IdStem or IdTree? ---------------------------------------------------------------------------------------
# If no IdStem take IdTree
if((!"IdStem" %in% names(DataTree) | all(is.na(DataTree$IdStem))) &
("IdTree" %in% names(DataTree) & any(!is.na(DataTree$IdTree))) ){ ID <- "IdTree"
}else{ ID <- "IdStem"}
ID
!any(c("IdStem", "IdTree") %in% names(DataTree)) | (all(is.na(DataTree$IdStem)) &  all(is.na(DataTree$IdTree)))
DataIDNa
ID
Ids
!any(c("IdStem", "IdTree") %in% names(DataTree)) | (all(is.na(DataTree$IdStem)) &  all(is.na(DataTree$IdTree)))
devtools::load_all(".")
library(TreeData)
# Apply for all the trees -----------------------------------------------------------------------------------------------
# i = "100635"
Data <- do.call(rbind, lapply(Ids, function(i) DiameterCorrectionByTree(
DataTree = Data[get(ID) %in% i & !is.na(Year)], # per ID, all censuses
Data = Data,
DefaultHOM = DefaultHOM,
MaxDBH = MaxDBH,
PositiveGrowthThreshold = PositiveGrowthThreshold,
NegativeGrowthThreshold = NegativeGrowthThreshold,
Pioneers = Pioneers,
PioneersGrowthThreshold = PioneersGrowthThreshold,
WhatToCorrect = WhatToCorrect,
CorrectionType = CorrectionType,
DBHRange = DBHRange,
MinIndividualNbr = MinIndividualNbr,
OtherCrit =  OtherCrit,
Digits = Digits,
coef = coef,
DetectOnly = DetectOnly
)
)) # do.call apply the 'rbind' to the lapply result
devtools::load_all(".")
library(TreeData)
# Apply for all the trees -----------------------------------------------------------------------------------------------
# i = "100635"
Data <- do.call(rbind, lapply(Ids, function(i) DiameterCorrectionByTree(
DataTree = Data[get(ID) %in% i & !is.na(Year)], # per ID, all censuses
Data = Data,
DefaultHOM = DefaultHOM,
MaxDBH = MaxDBH,
PositiveGrowthThreshold = PositiveGrowthThreshold,
NegativeGrowthThreshold = NegativeGrowthThreshold,
Pioneers = Pioneers,
PioneersGrowthThreshold = PioneersGrowthThreshold,
WhatToCorrect = WhatToCorrect,
CorrectionType = CorrectionType,
DBHRange = DBHRange,
MinIndividualNbr = MinIndividualNbr,
OtherCrit =  OtherCrit,
Digits = Digits,
coef = coef,
DetectOnly = DetectOnly
)
)) # do.call apply the 'rbind' to the lapply result
Ids
View(Data)
i = 101605_1_auto
i = "101605_1_auto"
Data[get(ID) %in% i & !is.na(Year)]
# IDs vector --------------------------------------------------------------------------------------------------------
Ids <- as.vector(na.omit(unique(Data[!is.na(Year), get(ID)]))) # Tree Ids
Ids
# IDs vector --------------------------------------------------------------------------------------------------------
Ids <- as.vector(na.omit(unique(Data[, get(ID)]))) # Tree Ids
# IDs vector --------------------------------------------------------------------------------------------------------
Ids <- as.vector(na.omit(unique(Data[!is.na(Year), get(ID)]))) # Tree Ids
devtools::load_all(".")
devtools::load_all(".")
library(TreeData)
library(TreeData)
library(TreeData)
library(knitr)
library(kableExtra)
library(shiny)
library(shinydashboard)
library(shinyjs)
library(shinyWidgets)
library(data.table)
library(ggplot2)
Diam_corr <- DiameterCorrection(
Status_corr,
KeepMeas = c("MaxHOM", "MaxDate"),
DefaultHOM = 1.3,
MaxDBH = 500,
PositiveGrowthThreshold = 5,
NegativeGrowthThreshold = -2,
Pioneers = NULL,
PioneersGrowthThreshold = 7.5,
WhatToCorrect = c("POM change", "punctual", "shift"),
CorrectionType = "individual",
Digits = 1L,
DBHCorForDeadTrees = FALSE,
coef = 0.9,
DetectOnly = FALSE)
pdf("DiameterCorrectionPlots_TestData2.pdf", width = 25, height = 10)
DiameterCorrectionPlot(Diam_corr, OnlyCorrected = TRUE, SeveralWindows = F)
dev.off()
Rslt <- RecruitmentCorrection(Diam_corr,
KeepMeas = c("MaxHOM", "MaxDate"),
MinDBH = 10,
PositiveGrowthThreshold = 5,
InvariantColumns = c("Site",
"Genus_TreeDataCor",
"Species_TreeDataCor",
"Family_TreeDataCor",
"ScientificName_TreeDataCor"),
DetectOnly = FALSE)
devtools::load_all(".")
library(TreeData)
Rslt <- RecruitmentCorrection(Diam_corr,
KeepMeas = c("MaxHOM", "MaxDate"),
MinDBH = 10,
PositiveGrowthThreshold = 5,
InvariantColumns = c("Site",
"Genus_TreeDataCor",
"Species_TreeDataCor",
"Family_TreeDataCor",
"ScientificName_TreeDataCor"),
DetectOnly = FALSE)
IdCorr <- Rslt[CorrectedRecruit %in%  TRUE, IdStem]
TreesCorr <- Rslt[IdStem %in% IdCorr, .(IdStem,
Year,
Diameter,
Diameter_TreeDataCor,
CorrectedRecruit)]
ggplot(TreesCorr) +
aes(x = Year, y = Diameter_TreeDataCor) +
geom_line(linewidth = 0.5, colour = "#112446") +
geom_point(shape = "circle", size = 1.5, mapping = aes(color = CorrectedRecruit)) +
theme_minimal() +
facet_wrap(vars(IdStem), scales = "free")
library(TreeData)
library(knitr)
library(kableExtra)
library(shiny)
library(shinydashboard)
library(shinyjs)
library(shinyWidgets)
library(data.table)
library(ggplot2)
?StatusCorrection
library(TreeData)
usethis::use_pkgdown()
pkgdown::build_site()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>", echo = T, message = T, warning = F, cache = T
)
library(TreeData)
library(knitr)
library(kableExtra)
library(shiny)
library(shinydashboard)
library(shinyjs)
library(shinyWidgets)
library(data.table)
library(ggplot2)
data("TestData")
Rslt <- GeneralErrorsDetection(TestData)
# The detected errors
unique(Rslt[Comment != "", Comment])
Rslt[Comment != "", ]
Status_corr <- StatusCorrection(TestData,
InvariantColumns = c("Site",
"Genus",
"Species",
"Family",
"ScientificName"),
DeathConfirmation = 2,
UseSize = FALSE,
AddRowsForForgottenCensuses = TRUE,
DetectOnly = FALSE,
RemoveRBeforeAlive = TRUE,
RemoveRAfterDeath = TRUE)
Status_corr[LifeStatus!=LifeStatus_TreeDataCor]
# pdf("LifeStatusCorrectionPlots.pdf", width = 25, height = 10)
LifeStatusCorrectionPlot(Status_corr, OnlyCorrected = T, SeveralWindows = F)
# dev.off()
Data <- data.table(IdStem = "A",
ScientificName = "Tree",
Year = c(1998, 2008, 2016, 2017, 2018, 2019, 2021),
IdCensus = factor(c(1998, 2008, 2016, 2017, 2018, 2019, 2021), ordered = TRUE),
Diameter = c(19, 19, 21.4, 22.6, 23.1, 23.1, 23.6),
HOM = c(1.30, 3.25, 3.25, 3.25, 3.25, 3.25, 3.25))
Rslt <- TaperCorrection(Data, DefaultHOM = 1.3,
TaperParameter = function(DAB, HOM) 0.156 - 0.023 * log(DAB) - 0.021 * log(HOM),
TaperFormula = function(DAB, HOM, TaperParameter, DefaultHOM) DAB / (exp(- TaperParameter*(HOM - DefaultHOM))))
DiameterCorrectionPlot(Rslt, CorCol = "TaperDBH_TreeDataCor")
Rslt <- TaperCorrection(Status_corr, DefaultHOM = 1.3,
TaperParameter = function(DAB, HOM) 0.156 - 0.023 * log(DAB) - 0.021 * log(HOM),
TaperFormula = function(DAB, HOM, TaperParameter, DefaultHOM) DAB / (exp(- TaperParameter*(HOM - DefaultHOM))))
View(TestData)
TestData$HOM
Data <- TestData
all(is.na(Data$HOM))
!"HOM" %in% names(Data)| all(is.na(Data$HOM))
devtools::load_all(".")
library(TreeData)
Rslt <- TaperCorrection(Status_corr, DefaultHOM = 1.3,
TaperParameter = function(DAB, HOM) 0.156 - 0.023 * log(DAB) - 0.021 * log(HOM),
TaperFormula = function(DAB, HOM, TaperParameter, DefaultHOM) DAB / (exp(- TaperParameter*(HOM - DefaultHOM))))
library(TreeData)
library(knitr)
library(kableExtra)
library(shiny)
library(shinydashboard)
library(shinyjs)
library(shinyWidgets)
library(data.table)
library(ggplot2)
Diam_corr <- DiameterCorrection(
Status_corr,
KeepMeas = c("MaxHOM", "MaxDate"),
DefaultHOM = 1.3,
MaxDBH = 500,
PositiveGrowthThreshold = 5,
NegativeGrowthThreshold = -2,
Pioneers = NULL,
PioneersGrowthThreshold = 7.5,
WhatToCorrect = c("POM change", "punctual", "shift"),
CorrectionType = "individual",
Digits = 1L,
DBHCorForDeadTrees = FALSE,
coef = 0.9,
DetectOnly = FALSE)
pdf("DiameterCorrectionPlots_TestData2.pdf", width = 25, height = 10)
DiameterCorrectionPlot(Diam_corr, OnlyCorrected = TRUE, SeveralWindows = F)
dev.off()
# pdf("DiameterCorrectionPlots_TestData2.pdf", width = 25, height = 10)
DiameterCorrectionPlot(Diam_corr, OnlyCorrected = TRUE, SeveralWindows = F)
Rslt <- RecruitmentCorrection(Diam_corr,
KeepMeas = c("MaxHOM", "MaxDate"),
MinDBH = 10,
PositiveGrowthThreshold = 5,
InvariantColumns = c("Site",
"Genus_TreeDataCor",
"Species_TreeDataCor",
"Family_TreeDataCor",
"ScientificName_TreeDataCor"),
DetectOnly = FALSE)
IdCorr <- Rslt[CorrectedRecruit %in%  TRUE, IdStem]
TreesCorr <- Rslt[IdStem %in% IdCorr, .(IdStem,
Year,
Diameter,
Diameter_TreeDataCor,
CorrectedRecruit)]
ggplot(TreesCorr) +
aes(x = Year, y = Diameter_TreeDataCor) +
geom_line(linewidth = 0.5, colour = "#112446") +
geom_point(shape = "circle", size = 1.5, mapping = aes(color = CorrectedRecruit)) +
theme_minimal() +
facet_wrap(vars(IdStem), scales = "free")
pkgdown::build_site()
devtools::load_all(".")
library(TreeData)
detach("package:TreeData", unload = TRUE)
pkgdown::build_site()
usethis::use_pkgdown_github_pages()
usethis::use_github_action("pkgdown")
usethis::use_github_action_check_standard()
usethis::use_github_action("test-coverage")
library(TreeData)
install.packages("shiny")
devtools::load_all(".")
library(TreeData)
library(TreeData)
library(knitr)
library(kableExtra)
library(shiny)
library(shinydashboard)
library(shinyjs)
library(shinyWidgets)
library(data.table)
library(ggplot2)
data("TestData")
Status_corr <- StatusCorrection(TestData,
InvariantColumns = c("Site",
"Genus_TreeDataCor",
"Species_TreeDataCor",
"Family_TreeDataCor",
"ScientificName_TreeDataCor"),
DeathConfirmation = 2,
UseSize = FALSE,
AddRowsForForgottenCensuses = TRUE,
DetectOnly = FALSE,
RemoveRBeforeAlive = TRUE,
RemoveRAfterDeath = TRUE)
View(Status_corr)
Status_corr[IdStem == 101362_1_auto, .(IdStem, LifeStatus, LifeStatus_TreeDataCor, Diameter, Year, Comment)]
library(TreeData)
library(knitr)
library(kableExtra)
library(shiny)
library(shinydashboard)
library(shinyjs)
library(shinyWidgets)
library(data.table)
library(ggplot2)
Status_corr[IdStem == "101362_1_auto", .(IdStem, LifeStatus, LifeStatus_TreeDataCor, Diameter, Year, Comment)]
check <- Status_corr[IdStem == "101362_1_auto", .(IdStem, LifeStatus, LifeStatus_TreeDataCor, Diameter, Year, Comment)]
View(check)
Diam_corr <- DiameterCorrection(
Status_corr,
KeepMeas = c("MaxHOM", "MaxDate"),
DefaultHOM = 1.3,
MaxDBH = 500,
PositiveGrowthThreshold = 5,
NegativeGrowthThreshold = -2,
Pioneers = NULL,
PioneersGrowthThreshold = 7.5,
WhatToCorrect = c("POM change", "punctual", "shift"),
CorrectionType = "individual",
Digits = 1L,
DBHCorForDeadTrees = FALSE,
coef = 0.9,
DetectOnly = FALSE)
View(Diam_corr)
View(Diam_corr)
Status_corr <- StatusCorrection(TestData,
InvariantColumns = c("Site",
"Genus",
"Species",
"Family",
"ScientificName"),
DeathConfirmation = 2,
UseSize = FALSE,
AddRowsForForgottenCensuses = TRUE,
DetectOnly = FALSE,
RemoveRBeforeAlive = TRUE,
RemoveRAfterDeath = TRUE)
Diam_corr <- DiameterCorrection(
Status_corr,
KeepMeas = c("MaxHOM", "MaxDate"),
DefaultHOM = 1.3,
MaxDBH = 500,
PositiveGrowthThreshold = 5,
NegativeGrowthThreshold = -2,
Pioneers = NULL,
PioneersGrowthThreshold = 7.5,
WhatToCorrect = c("POM change", "punctual", "shift"),
CorrectionType = "individual",
Digits = 1L,
DBHCorForDeadTrees = FALSE,
coef = 0.9,
DetectOnly = FALSE)
View(Diam_corr)
Diam_corr[IdStem == "100685_1_auto", .(IdStem, Year, Diameter, Diameter_TreeDataCor, Comment)]
(10+ (2017- 2016) * 0)
devtools::load_all(".")
library(TreeData)
library(data.table)
data(TestData)
# With The Plant List:
Rslt <- BotanicalCorrection(TestData, Source = "TPL")
library(data.table)
data(WFOdataSubset)
# Fabaceae Dicorynia guianensis (angelique) "a"
# Lecythidaceae Eschweilera sagotiana (maho noir) "b"
# Chrysobalanaceae Licania alba (koko) "c"
# Fabaceae Eperua falcata (wapa) "d"
Data <- data.table(Site = "Nowhere",
IdTree = c(rep("a", 4), rep("b", 4), rep("c", 4), rep("d", 4), rep("e", 1), rep("f", 1), rep("g", 1), rep("h", 1)), # 8 ind
Year = c(rep(c(2000:2003), 4), rep(2000, 4)) # 4 years each
)
Data <- Data[order(IdTree, Year)]
Data[, Family := c(rep("Fabaceae", 4), rep("Lecythidaceae", 4), rep("Chrysobalanaceae", 4), rep("Fabaceae", 4), rep("Sapindaceae", 1), rep("Clusiaceae", 1), rep("Burseraceae", 1), rep("Clusiaceae", 1))]
Data[, Genus := c(rep("Dicorynia", 4), rep("Eschweilera", 4), rep("Licania", 4), rep("EperuaFabaceae", 4), rep("Indet.Sapindaceae", 1), rep("Tovomita", 1), rep("Protium", 1), rep("Tovomita", 1))]
Data[, Species := c(rep("guianensis", 4), rep("sagotiana", 4), rep("alba", 4), rep("falcata", 4), rep("Indet.", 1), rep("sp.5-CAY", 1), rep("opacum_subsp.rabelianum", 1), rep("Indet.", 1))]
Data[, VernName := c(rep("angelique", 4), rep("maho noir", 4), rep("koko", 4), rep("wapa", 4), rep(NA, 4))]
Data[, Subspecies := NA_character_]
## Missing value in  Family, ScientificName/Genus, species, VernName
Data[IdTree %in% "d" & Year %in% 2000, ("Family") := NA_character_]
Data[IdTree %in% "b" & Year %in% 2000, ("Genus") := NA_character_]
Data[IdTree %in% "b", ("Family") := NA_character_]
Data[IdTree %in% "c" & Year %in% 2000, ("Species") := NA_character_]
Data[IdTree %in% "a" & Year %in% 2000, ("VernName") := NA_character_]
Data[IdTree %in% "d" & Year %in% 2000, ("VernName") := NA_character_]
## Special characters
Data[IdTree %in% "a", ("Family") := "Fabacé"] # good answer: "Fabaceae"
Data[IdTree %in% "c" & Year %in% 2003, ("Genus") := "Licanï_a"] # good answer: "Licania"
## Variant botanical informations per IdTree
Data[IdTree %in% "d" & Year %in% 2002, ("Species") := "grandi!flora"] # good answer: "falcata"
## Family name in the genus/species columns
Data[IdTree %in% "b", ("Species") := "Lecythidaceae"] # good answer: "sagotiana"
## Family & Scientific names unmatch
Data[IdTree %in% "c", ("Family") := "Lecythidaceae"] # good answer: "Chrysobalanaceae"
## Scientific & vernacular names unmatch
Data[IdTree %in% "d" & Year %in% 2001, ("VernName") := "leaf"]  # good answer: "wapa"
Data[, ScientificName := paste(Genus, Species)]
# Create bad test data --------------------------------------------------------------------------------------------------
MatrixData <- as.matrix(Data)
# Check the function argument -------------------------------------------------------------------------------------------
expect_error(BotanicalCorrection(MatrixData),
regexp = "Data must be a data.frame or data.table")
expect_error(BotanicalCorrection(Data, Source = TRUE),
regexp = "must be NULL or a character vector")
expect_error(BotanicalCorrection(Data, Source = TRUE),
regexp = "NULL")
expect_error(BotanicalCorrection(Data, Source = "TRUE"),
regexp = "should be one of")
expect_error(BotanicalCorrection(Data, Source = "WFO", WFOData = NULL),
regexp = "You must provide the 'WFOData' argument")
expect_error(BotanicalCorrection(Data, Source = "TPL", DetectOnly = "TRUE"),
regexp = "The 'DetectOnly' argument must be a logical")
## Detect Only: no correction, only comments ----------------------------------------------------------------------------
RsltTPL <- BotanicalCorrection(Data, Source = "TPL", DetectOnly = TRUE)
RsltWFO <- BotanicalCorrection(Data, Source = "WFO", WFOData = WFOdataSubset, DetectOnly = TRUE)
Rslt <- list(RsltTPL, RsltWFO)
# r = 1
for(r in 1:length(Rslt)){
# No correction, only comments
expect_true(all(!(grepl("_TreeDataCor", names(Rslt[[r]])))) & "Comment" %in% names(Rslt[[r]]))
# Missing value
Rslt[[r]][is.na(Subspecies), Subspecies := ""] # Subspecies = NA is ok
expect_true(all(grepl("Missing value", Rslt[[r]][rowSums(is.na(Rslt[[r]])) > 0, Comment])))
# -aceae in Genus or Species
expect_true(all(grepl("'aceae' cannot be genus or species names",
Rslt[[r]][grepl("aceae", Data$Genus) | grepl("aceae", Data$Species), Comment])))
# Special character in Genus, Family
expect_true(all(grepl("Special characters",
Rslt[[r]][grepl('[[:punct:]]', Data$Genus) | grepl('[[:punct:]]', Data$Family), Comment])))
# Variant botanical info per IdTree (A FAIRE)
VarIdTree <- unique(Rslt[[r]][rowSums(is.na(Rslt[[r]])) == 0, .(IdTree, Family, Genus, Species, Subspecies, VernName)])[duplicated(IdTree), IdTree]
expect_true(all(grepl("Different botanical informations",
Rslt[[r]][IdTree %in% VarIdTree, Comment])))
}
# Correction
RsltTPL <- BotanicalCorrection(Data, Source = "WFO", WFOData = WFOdataSubset) # "TPL" (doest' work during the github actions)
# Correction
RsltTPL <- BotanicalCorrection(Data, Source = "WFO", WFOData = WFOdataSubset) # "TPL" (doest' work during the github actions)
RsltWFO <- BotanicalCorrection(Data, Source = "WFO", WFOData = WFOdataSubset)
