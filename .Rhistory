args
argsCol <- args[!args %in% c(SizeUnit, POMUnit, TreeHeightUnit)] # columns names arguments
argsCol
argsUnit <- args[args %in% c(SizeUnit, POMUnit, TreeHeightUnit)] # units arguments
argsUnit
stop("Data must be a data.frame")
if (!inherits(Data, "data.frame"))
stop("Data must be a data.frame")
Data = Paracou_subset
if (!inherits(Data, "data.frame"))
stop("Data must be a data.frame")
for(i in 1:length(args)) # all args
if(!inherits(args[i], "character"))
stop(paste0("must be in character"[i]))
for(i in 1:length(argsUnit))
if(!argsUnit[i] %in% c("mm", "millimetre", "millimeter", "milímetro", "milimétrica",
"cm", "centimetre", "centimeter", "centímetro",
"dm", "decimetre", "decimeter", "decímetro",
"m", "metre", "meter", "metro",
))
stop("Please indicate units with 'mm' for millimetres, 'cm' for
centimetres, 'dm' for decimetres and 'm' for metres")
devtools::load_all(".")
length(argsUnit) > 0
if(length(argsUnit) > 0){
for(i in 1:length(argsUnit))
if(!argsUnit[i] %in% c("mm", "millimetre", "millimeter", "milímetro", "milimétrica",
"cm", "centimetre", "centimeter", "centímetro",
"dm", "decimetre", "decimeter", "decímetro",
"m", "metre", "meter", "metro",
))
stop("Please indicate units with 'mm' for millimetres, 'cm' for
centimetres, 'dm' for decimetres and 'm' for metres")
}
for(i in 1:length(argsCol))
if(!argsCol[i] %in% names(Data))
stop(paste0("is not a column name of your dataset"[i]))
# if the variable exists but the unit is NULL
if(is.null(SizeUnit) & !is.null(Size))
stop("Please indicate in which unit ('SizeUnit') the 'Size' of your tree is measured")
if(is.null(POMUnit) & !is.null(POM))
stop("Please indicate in which unit ('POMUnit') the 'POM'
(Point Of Measurement) of your tree is measured")
if(is.null(TreeHeightUnit) & !is.null(TreeHeight))
stop("Please indicate in which unit ('TreeHeightUnit') the 'TreeHeight' is measured")
library(TreeData)
RequiredFormat(Paracou_subset,
Plot = "Plot",
SubPlot = "SubPlot",
Time = "CensusYear",
IdTree = "idTree",
LifeStatus = "CodeAlive",
Size = "Circ",
SizeUnit = NULL,
POM = "MeasCode",
POMUnit = NULL,
PlotArea = "PlotArea",
X = "Xutm",
Y = "Yutm",
ScientificName = NULL,
VernName = "VernName",
Family = "Family",
Genus = "Genus",
Species = "Species",
CommercialSp = "CommercialSp",
TreeHeight = NULL,
TreeHeightUnit = NULL)
DataInput <- copy(Data) # input data copy
## data.frame to data.table
setDT(Data)
class(Data)
DT = data.table(A=1:10, B=letters[1:10])
DT2 = data.table(A=1:10000, ColB=10000:1)
setkey(DT,B)
tables()
started.at=proc.time()
Sys.sleep(1)
cat("Finished in",timetaken(started.at),"\n")
devtools::load_all(".")
devtools::load_all(".")
library(TreeData)
BarroColoradoSubset <- fread("D:/VSC TmFO/Data/Barro Colorado_data/FullMeasurementBCI/Barro Colorado_fulldata.tsv")
library(data.table)
BarroColoradoSubset <- fread("D:/VSC TmFO/Data/Barro Colorado_data/FullMeasurementBCI/Barro Colorado_fulldata.tsv")
View(BarroColoradoSubset)
summary(BarroColoradoSubset)
unique(BarroColoradoSubset$TreeID)
length
length(unique(BarroColoradoSubset$TreeID))
length(unique(BarroColoradoSubset$PlotCensusNumber))
length(unique(BarroColoradoSubset$QuadratName))
length(unique(BarroColoradoSubset$QuadratID))
length(unique(BarroColoradoSubset$QuadratName))
length(unique(BarroColoradoSubset$ExactDate))
unique(BarroColoradoSubset$ExactDate)
sort(unique(BarroColoradoSubset$ExactDate))
class(BarroColoradoSubset$ExactDate)
tools::showNonASCIIfile("R/RequiredFormat.R")
library(TreeData)
BarroColoradoSubset <- fread("D:/VSC TmFO/Data/Barro Colorado_data/FullMeasurementBCI/Barro Colorado_fulldata.tsv")
library(data.table)
BarroColoradoSubset <- fread("D:/VSC TmFO/Data/Barro Colorado_data/FullMeasurementBCI/Barro Colorado_fulldata.tsv")
BarroColoradoSubset$ExactDate <- as.numeric(format(BarroColoradoSubset$ExactDate, "%Y"))
View(BarroColoradoSubset)
BarroColoradoFull <- fread("D:/VSC TmFO/Data/Barro Colorado_data/FullMeasurementBCI/Barro Colorado_fulldata.tsv")
BarroColoradoSubset$Year <- as.numeric(format(BarroColoradoFull$ExactDate, "%Y"))
View(BarroColoradoFull)
BarroColoradoSubset <- BarroColoradoFull
BarroColoradoSubset[, Year := as.numeric(format(ExactDate, "%Y"))]
length(sort(unique(BarroColoradoSubset$Year)))
sort(unique(BarroColoradoSubset$Year))
BarroColoradoSubset <- BarroColoradoSubset[PlotCensusNumber == 1 & PlotCensusNumber == 2 & PlotCensusNumber == 3, ]
BarroColoradoSubset <- BarroColoradoFull
BarroColoradoSubset[, Year := as.numeric(format(ExactDate, "%Y"))]
BarroColoradoSubset <- BarroColoradoSubset[PlotCensusNumber == 1 | PlotCensusNumber == 2 | PlotCensusNumber == 3, ]
sort(unique(BarroColoradoSubset[BarroColoradoSubset$PlotCensusNumber == "1",]$Year))
sort(unique(BarroColoradoSubset[BarroColoradoSubset$PlotCensusNumber == "2",]$Year)) # 1981 1982 1983
sort(unique(BarroColoradoSubset[BarroColoradoSubset$PlotCensusNumber == "3",]$Year)) #
sort(unique(BarroColoradoSubset[BarroColoradoSubset$PlotCensusNumber == "4",]$Year)) #
sort(unique(BarroColoradoSubset[BarroColoradoSubset$PlotCensusNumber == "4",]$Year)) #
sort(unique(BarroColoradoSubset[BarroColoradoSubset$PlotCensusNumber == "5",]$Year)) #
sort(unique(BarroColoradoSubset[BarroColoradoSubset$PlotCensusNumber == "6",]$Year)) #
sort(unique(BarroColoradoSubset[BarroColoradoSubset$PlotCensusNumber == "7",]$Year)) #
sort(unique(BarroColoradoSubset[BarroColoradoSubset$PlotCensusNumber == "8",]$Year)) #
sort(unique(BarroColoradoFull[BarroColoradoFull$PlotCensusNumber == "1",]$Year)) # 1981 1982 1983
truc <- BarroColoradoSubset[PlotCensusNumber == 4]
BarroColoradoSubset <- BarroColoradoFull
BarroColoradoSubset[, Year := as.numeric(format(ExactDate, "%Y"))]
truc <- BarroColoradoSubset[PlotCensusNumber == 4]
sort(unique(truc[truc$PlotCensusNumber == "4",]$Year)) #
truc <- BarroColoradoSubset[PlotCensusNumber == 5]
sort(unique(truc[truc$PlotCensusNumber == "5",]$Year)) #
truc <- BarroColoradoSubset[PlotCensusNumber == 6]
sort(unique(truc[truc$PlotCensusNumber == "6",]$Year)) #
truc <- BarroColoradoSubset[PlotCensusNumber == 7]
sort(unique(truc[truc$PlotCensusNumber == "7",]$Year)) #
truc <- BarroColoradoSubset[PlotCensusNumber == 8]
sort(unique(truc[truc$PlotCensusNumber == "8",]$Year)) #
truc <- BarroColoradoSubset[PlotCensusNumber == 2]
sort(unique(truc[truc$PlotCensusNumber == "2",]$Year)) # 1985
BCplots <- BarroColoradoSubset[PlotCensusNumber == 1 | PlotCensusNumber == 3 | PlotCensusNumber == 8, ]
ind <- sample(unique(BCplots$TreeID), 1000)
BCind <- BarroColoradoSubset[TreeID %in% ind, ] # 1000 individuals -> 6565 rows
unique(BCind$TreeID)
BarroColoradoSubset <- BarroColoradoSubset[TreeID %in% ind, ] # 1000 individuals -> 50906 rows
BarroColoradoSubset <- BarroColoradoSubset[TreeID %in% ind, ] # 1000 individuals -> 50906 rows
write.csv2(BarroColoradoSubset, "D:/VSC TmFO/Data/BarroColoradoSubset.csv")
Paracou6 <- Guyafor2df(UID = "Vincyane.Badouard", PWD = "Vincyane973+", Driver = "SQL Server",WHERE="Forest='Paracou' AND Plot='6'")
library(EcoFoG)
library(EcoFoG)
Paracou6 <- Guyafor2df(UID = "Vincyane.Badouard", PWD = "Vincyane973+", Driver = "SQL Server",WHERE="Forest='Paracou' AND Plot='6'")
setDT(Paracou6) # as data.table
library(EcoFoG)
library(data.table)
Paracou6 <- Guyafor2df(UID = "Vincyane.Badouard", PWD = "Vincyane973+", Driver = "SQL Server",WHERE="Forest='Paracou' AND Plot='6'")
setDT(Paracou6) # as data.table
Paracou6C1 <- Paracou6[SubPlot == 1]
sort(unique(Paracou6C1$CensusYear))
# 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1997 1999 2001 2003 2005 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020
# We select the 5 last censuses 2016-2020
ParacouSubset <- Paracou6C1[CensusYear >= 2016] # 4904 obs
ind <- sample(unique(ParacouSubset$idTree), 1000)
ParacouSubset <- ParacouSubset[idTree %in% ind] # 4854 obs
# 4 sub-sub-squares creation
MaxX <- max(ParacouSubset$Xutm)
MinX <- min(ParacouSubset$Xutm)
MaxY <- max(ParacouSubset$Yutm)
MinY <- min(ParacouSubset$Yutm)
HalfX <- MinX + (MaxX - MinX)/2
HalfY <- MinY + (MaxY - MinY)/2
ParacouSubset[, SubSubPlot := NA_real_]
ParacouSubset[Xutm < HalfX & Yutm > HalfY, SubSubPlot := "1"]
ParacouSubset[Xutm > HalfX & Yutm > HalfY, SubSubPlot := "2"]
ParacouSubset[Xutm < HalfX & Yutm < HalfY, SubSubPlot := "3"]
ParacouSubset[Xutm > HalfX & Yutm < HalfY, SubSubPlot := "4"]
ggplot() +
geom_sf(data = sf::st_as_sf(ParacouSubset[SubSubPlot == "1"], coords = c("Xutm", "Yutm")), col = "blue") +
geom_sf(data = sf::st_as_sf(ParacouSubset[SubSubPlot == "2"], coords = c("Xutm", "Yutm")), col = "red") +
geom_sf(data = sf::st_as_sf(ParacouSubset[SubSubPlot == "3"], coords = c("Xutm", "Yutm")), col = "orange") +
geom_sf(data = sf::st_as_sf(ParacouSubset[SubSubPlot == "4"], coords = c("Xutm", "Yutm")), col = "green")
library(ggplot2)
ggplot() +
geom_sf(data = sf::st_as_sf(ParacouSubset[SubSubPlot == "1"], coords = c("Xutm", "Yutm")), col = "blue") +
geom_sf(data = sf::st_as_sf(ParacouSubset[SubSubPlot == "2"], coords = c("Xutm", "Yutm")), col = "red") +
geom_sf(data = sf::st_as_sf(ParacouSubset[SubSubPlot == "3"], coords = c("Xutm", "Yutm")), col = "orange") +
geom_sf(data = sf::st_as_sf(ParacouSubset[SubSubPlot == "4"], coords = c("Xutm", "Yutm")), col = "green")
usethis::use_data(ParacouSubset)
ParacouSubsetWide <- dcast(ParacouSubset, idTree ~ CensusYear, value.var = "Circ")
OtherCols <- copy(ParacouSubset)
OtherCols[, c("CensusYear", "CensusDate", "CensusDateCertainty",
"Circ", "CircCorr", "CorrCode",
"CodeAlive", "MeasCode") := NULL]
ParacouSubsetWide <- unique(merge(ParacouSubsetWide, OtherCols, by = "idTree")) #1000 ind -> 1000 rows
usethis::use_data(ParacouSubsetWide)
View(ParacouSubset)
ParacouSubset[, Project := NULL]
View(ParacouSubset)
usethis::use_data(ParacouSubset)
usethis::use_data(ParacouSubset, overwrite = TRUE)
# usethis::use_data(ParacouSubset, overwrite = TRUE)
data(ParacouSubset)
library(TreeData)
library(TreeData)
# usethis::use_data(ParacouSubset, overwrite = TRUE)
data(ParacouSubset)
View(ParacouSubsetWide)
force(ParacouSubset)
length(ParacouSubset)
names(ParacouSubset)
ParacouSubsetWide <- dcast(ParacouSubset, idTree ~ CensusYear, value.var = "Circ")
OtherCols <- copy(ParacouSubset)
OtherCols[, c("CensusYear", "CensusDate", "CensusDateCertainty",
"Circ", "CircCorr", "CorrCode",
"CodeAlive", "MeasCode") := NULL]
ParacouSubsetWide <- unique(merge(ParacouSubsetWide, OtherCols, by = "idTree")) #1000 ind -> 1000 rows
usethis::use_data(ParacouSubsetWide)
usethis::use_data(ParacouSubsetWide, overwrite = TRUE)
View(ParacouSubsetWide)
BarroColoradoFull <- fread("D:/VSC TmFO/Data/Barro Colorado_data/FullMeasurementBCI/Barro Colorado_fulldata.tsv")
BarroColoradoSubset <- fread("D:/VSC TmFO/Data/Barro Colorado_data/FullMeasurementBCI/BarroColoradoSubset.tsv")
library(data.table)
BarroColoradoSubset <- fread("D:/VSC TmFO/Data/Barro Colorado_data/FullMeasurementBCI/BarroColoradoSubset.csv")
BarroColoradoSubset <- fread("D:/VSC TmFO/Data/BarroColoradoSubset.csv")
usethis::use_data(BarroColoradoSubset, overwrite = TRUE)
View(BarroColoradoSubset)
length(unique(BarroColoradoFull$QuadratName))
length(unique(BarroColoradoFull$QuadratID))
unique(BarroColoradoFull$QuadratName)
sort(unique(BarroColoradoFull$QuadratName))
BarroColoradoSubset <- BarroColoradoFull
BarroColoradoSubset[, Year := as.numeric(format(ExactDate, "%Y"))]
length(sort(unique(BarroColoradoSubset$Year)))
truc <- BarroColoradoSubset[QuadratName == 1]
truc <- BarroColoradoSubset[QuadratName == 1]
sort(unique(truc[truc$QuadratName == "1",]$Year)) # 1981 1982 1983
truc <- BarroColoradoSubset[QuadratName == 2]
sort(unique(truc[truc$QuadratName == "2",]$Year)) # 1985
truc <- BarroColoradoSubset[QuadratName == 2]
sort(unique(truc[truc$QuadratName == "2",]$Year)) # 1982 1985 1990 1991 1995 2000 2005 2010 2015
truc <- BarroColoradoSubset[QuadratName == 3]
sort(unique(truc[truc$QuadratName == "3",]$Year)) # 1990 1991 1992
truc <- BarroColoradoSubset[QuadratName == 4]
sort(unique(truc[truc$QuadratName == "4",]$Year)) # 1995 1996
truc <- BarroColoradoSubset[QuadratName == 5]
sort(unique(truc[truc$QuadratName == "5",]$Year)) # 2000 2001
2000 2001
truc <- BarroColoradoSubset[QuadratName == 5]
sort(unique(truc[truc$QuadratName == "5",]$Year)) # 1982 1985 1990 1991 1995 2000 2005 2010 2015
truc <- BarroColoradoSubset[QuadratName == 6]
sort(unique(truc[truc$QuadratName == "6",]$Year)) # 2005 2006
truc <- BarroColoradoSubset[QuadratName == 7]
sort(unique(truc[truc$QuadratName == "7",]$Year)) # 2010 2011
truc <- BarroColoradoSubset[QuadratName == 0]
sort(unique(truc[truc$QuadratName == "0",]$Year)) # 1982 1985 1990 1991 1995 2000 2005 2010 2015
BarroColoradoSubset <- BarroColoradoFull
BarroColoradoSubset[, Year := as.numeric(format(ExactDate, "%Y"))]
BCplots <- BarroColoradoSubset[QuadratName == 1 | QuadratName == 2 | QuadratName == 3, ]
BCcensus <- BCplots[Year >= 1995] # 4904 obs
ind <- sample(unique(BCcensus$TreeID), 1000)
unique(BCcensus$TreeID)
BarroColoradoSubset <- BCplots[Year >= 1995] # 4904 obs
length(unique(BCcensus$TreeID))
View(BarroColoradoSubset)
write.csv2(BarroColoradoSubset, "D:/VSC TmFO/Data/BarroColoradoSubset.csv")
write.csv2(BarroColoradoSubset, "D:/VSC TmFO/Data/BarroColoradoSubset.csv")
library(readr)
write.csv2(BarroColoradoSubset, "D:/VSC TmFO/Data/BarroColoradoSubset.csv")
write.csv2(BarroColoradoSubset, "D:/VSC TmFO/Data/BarroColoradoSubset.csv")
BarroColoradoSubset <- fread("D:/VSC TmFO/Data/BarroColoradoSubset.csv")
usethis::use_data(BarroColoradoSubset, overwrite = TRUE)
View(BarroColoradoSubset)
load("C:/Users/Utilisateur/AppData/Local/ProjetsR/TreeData/data/BarroColoradoSubset.rda")
View(BarroColoradoSubset)
BarroColoradoFull <- fread("D:/VSC TmFO/Data/Barro Colorado_data/FullMeasurementBCI/Barro Colorado_fulldata.tsv")
View(BarroColoradoFull)
BarroColoradoSubset <- copy(BarroColoradoFull)
BarroColoradoSubset[, Year := as.numeric(format(ExactDate, "%Y"))]
View(BarroColoradoSubset)
BCplots <- BarroColoradoSubset[QuadratName == 1 | QuadratName == 2 | QuadratName == 3, ]
BarroColoradoSubset <- BCplots[Year >= 1995] # 3829 obs
View(BarroColoradoSubset)
write.csv2(BarroColoradoSubset, "D:/VSC TmFO/Data/BarroColoradoSubset.csv")
usethis::use_data(BarroColoradoSubset, overwrite = TRUE)
load("C:/Users/Utilisateur/AppData/Local/ProjetsR/TreeData/data/BarroColoradoSubset.rda")
View(BarroColoradoSubset)
names(BarroColoradoSubset)
knitr::opts_chunk$set(echo = TRUE)
data("ParacouSubset")
data("ParacouSubset")
library(data.table)
Data = data("ParacouSubset")
force(ParacouSubset)
Data = data(ParacouSubset)
force(ParacouSubset)
Data = ParacouSubset
View(Data)
# Check duplicated idTree in a census
correspondances <- unique(Data[,c("idTree","Plot","SubPlot","TreeFieldNum")])
!identical(correspondances$idTree,unique(correspondances$idTree))
correspondances$idTree
unique(correspondances$idTree)
NonUniqueidTree <- !identical(correspondances$idTree,unique(correspondances$idTree))
NonUniqueidTree
duplicated(idTree)
correspondances
# Plot = Plot
# Subplot = Subplot
# TreeFieldNum = TreeFieldNum
# Time = NULL,
# IdTree = idTree,
# LifeStatus = NULL,
Size = Data$Circ
# Check missing value (NA/NULL/0) of tree size
SizeNA <- is.na(Data$Size) | Data$Size == 0
any(SizeNA)
# Plot = Plot
# Subplot = Subplot
# TreeFieldNum = TreeFieldNum
# Time = NULL,
# IdTree = idTree,
# LifeStatus = NULL,
Size = "Circ"
is.na(Data$get(Size)
"Missing value in"paste(Size)
paste(Size)
# Check missing value (NA/NULL/0) of tree size
SizeNA <- is.na(Data$get(Size)) | Data$get(Size) == 0
# Check missing value (NA/NULL/0) of tree size
SizeNA <- Data[is.na(get(Size)) | get(Size) == 0]            # is.na(Data$get(Size)) | Data$get(Size) == 0
# Check missing value (NA/NULL/0) of tree size
SizeNA <- Data[is.na(get(Size)) | get(Size) == 0, get(Size)]            # is.na(Data$get(Size)) | Data$get(Size) == 0
any(SizeNA)
"Missing value in",paste(Size)
paste0("Missing value in" Size)
paste0("Missing value in", Size)
Data[SizeNA ,Comment := paste0("Missing value in ", Size)]
Plot = "Plot"
Subplot = "Subplot"
TreeFieldNum = "TreeFieldNum"
# Time = NULL,
IdTree = "idTree"
# LifeStatus = NULL,
Size = "Circ"
paste0("Non-unique association of the ",idTree "with " , Plot", ", Subplot" and " , TreeFieldNum)
paste0("Non-unique association of the ",idTree, "with " ,Plot,", ",Subplot," and " ,TreeFieldNum)
paste0("Non-unique association of the ",IdTree, "with " ,Plot,", ",Subplot," and " ,TreeFieldNum)
paste0("Non-unique association of the ",IdTree," with " ,Plot,", ",Subplot," and " ,TreeFieldNum)
X = Xutm
X = "Xutm"
Y
Y = "Yutm"
# Check for missing coordinates
missing_coor <- Data[is.na(get(X)) | is.na(get(Y))]
any(missing_coor)
paste0("Missing coordinates: ",X,Y)
paste0("Missing coordinates: ",X," ,",Y)
paste0("Missing coordinates: ",X,", ",Y)
# Check of the unique association of the idTree with plot, subplot
correspondances <- unique(Data[,c(IdTree, Plot, SubPlot, TreeFieldNum)])
correspondances
c(IdTree, Plot, SubPlot, TreeFieldNum)
SubPlot = "SubPlot"
TreeFieldNum = "TreeFieldNum"
c(IdTree, Plot, SubPlot, TreeFieldNum)
# Check of the unique association of the idTree with plot, subplot
correspondances <- unique(Data[, c(IdTree, Plot, SubPlot, TreeFieldNum)])
correspondances
Size = c(Circ)
c(IdTree, Plot, SubPlot, TreeFieldNum)
# Check of the unique association of the idTree with plot, subplot
correspondances <- unique(Data[, c("idTree", "Plot", "SubPlot", "TreeFieldNum")]) #c(IdTree, Plot, SubPlot, TreeFieldNum)
correspondances
View(correspondances)
rm(correspondances)
# Check of the unique association of the idTree with plot, subplot
correspondances <- unique(Data[, c("idTree", "Plot", "SubPlot", "TreeFieldNum")]) #c(IdTree, Plot, SubPlot, TreeFieldNum)
c("idTree", "Plot", "SubPlot", "TreeFieldNum")
a <- c("idTree", "Plot", "SubPlot", "TreeFieldNum")
b <- c(IdTree, Plot, SubPlot, TreeFieldNum)
a
b
rm(correspondances)
correspondances <- unique(Data[, b]) #
correspondances <- unique(Data[, .(IdTree, Plot, SubPlot, TreeFieldNum)]) #
rm(correspondances)
correspondances <- unique(Data[, .(IdTree, Plot, SubPlot, TreeFieldNum)]) #
View(correspondances)
correspondances <- unique(Data[, .(get(IdTree), get(Plot), get(SubPlot), get(TreeFieldNum))])
correspondances <- unique(Data[, c(get(IdTree), get(Plot), get(SubPlot), get(TreeFieldNum))])
Plot = "Plot"
correspondances <- unique(Data[, c(get(IdTree), get(Plot), get(SubPlot), get(TreeFieldNum))])
get(Plot)
correspondances <- unique(Data[, .("IdTree", "Plot", "SubPlot", "TreeFieldNum")]) #
correspondances <- unique(Data[, c("IdTree", "Plot", "SubPlot", "TreeFieldNum")]) #
correspondances <- unique(Data[, c("idTree", "Plot", "SubPlot", "TreeFieldNum")]) #
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
data("ParacouSubset") # import data
# INPUTS
Data = ParacouSubset
library(TreeData)
data("ParacouSubset") # import data
# INPUTS
Data = ParacouSubset
Plot = "Plot"
SubPlot = "SubPlot"
Time = "CensusYear"
TreeFieldNum = "TreeFieldNum"
IdTree = "idTree"
LifeStatus = "CodeAlive"
Size = "Circ"
SizeUnit = "cm"
POM = "MeasCode"
POMUnit = "m"
PlotArea = "PlotArea"
X = "Xutm"
Y = "Yutm"
# ScientificName = NULL
VernName = "VernName"
Family = "Family"
Genus = "Genus"
Species = "Species"
CommercialSp = "CommercialSp"
# TreeHeight = NULL
# TreeHeightUnit = NULL
correspondances <- unique(Data[, .(get(IdTree), get(Plot), get(SubPlot), get(TreeFieldNum))])
correspondances <- unique(Data[, mget(c(IdTree, Plot, SubPlot, TreeFieldNum))])
mget(c(IdTree, Plot, SubPlot, TreeFieldNum))
correspondances <- unique(Data[, .(get(IdTree), get(Plot), get(SubPlot), get(TreeFieldNum))])
correspondances <- unique(Data[, c("idTree", "Plot", "SubPlot", "TreeFieldNum")]) # c(IdTree, Plot, SubPlot, TreeFieldNum)
View(correspondances)
correspondances <- unique(Data[, c(IdTree, Plot, SubPlot, TreeFieldNum)])
Data[, c(IdTree, Plot, SubPlot, TreeFieldNum)]
Data[, .(IdTree, Plot, SubPlot, TreeFieldNum)]
correspondances <- unique(Data[, ..(IdTree, Plot, SubPlot, TreeFieldNum)])
correspondances <- unique(Data[, ..c(IdTree, Plot, SubPlot, TreeFieldNum)])
vect <- c(IdTree, Plot, SubPlot, TreeFieldNum)
vect
correspondances <- unique(Data[, ..vect])
correspondances <- unique(Data[, c(IdTree, Plot, SubPlot, TreeFieldNum), with = FALSE]) # ".."
correspondances$..IdTree
correspondances[,IdTree]
correspondances[,IdTree, with = FALSE]
CorresIDs <- correspondances[,IdTree, with = FALSE]
CorresIDs
unique(CorresIDs)
identical(CorresIDs, unique(CorresIDs))
duplicated(CorresIDs)
correspondances <- unique(Data[!is.na(), c(IdTree, Plot, SubPlot, TreeFieldNum), with = FALSE]) # with = FALSE: the column names can be used as variables
correspondances <- na.omit(unique(Data[, c(IdTree, Plot, SubPlot, TreeFieldNum), with = FALSE])) # with = FALSE: the column names can be used as variables
Vars <- c(Plot, SubPlot, Time, TreeFieldNum, IdTree, LifeStatus, Size, POM, X, Y)
for (v in Vars) {
if(Vars[v] %in% names(Data)){ # If the column exists
MissingVal <- Data[is.na(get(Vars[v])) | get(Vars[v]) == 0, get(Vars[v])]
if(any(MissingVal)){ # but have NA values
Data[MissingVal, Comment := paste0("Missing value in ", Vars[v])] # comments
}
}
}
View(Data)
# Check missing trees compared to the previous census (add rows)
LastCens <- Data[max(Time), , with = FALSE]
# Check missing trees compared to the previous census (add rows)
LastCens <- Data[max(get(Time))]
View(LastCens)
max(get(Time))
# Check missing trees compared to the previous census (add rows)
LastCens <- Data[max(CensusYear)]
View(LastCens)
max(CensusYear)
max(Data$CensusYear)
# Check missing trees compared to the previous census (add rows)
LastCens <- Data[get(Time) == max(get(Time))]
View(LastCens)
# Check missing trees compared to the previous census (add rows)
max(Data[,get(Time)])
rm(LastCens)
LastCens <- Data[get(Time) == LastTime]
LastTime
# Check missing trees compared to the previous census (add rows)
LastTime <- max(Data[,get(Time)])
LastTime
LastCens <- Data[get(Time) == LastTime]
View(LastCens)
Data[,get(Time)] < LastTime
PreviousTimes <- Data[get(Time)< LastTime, get(Time)]
Data[get(Time)< LastTime, get(Time)]
unique(Data[get(Time)< LastTime, get(Time)])
max(unique(Data[get(Time)< LastTime, get(Time)]))
PreviousTime <- max(unique(Data[get(Time) < LastTime, get(Time)]))
PreviousCens <- Data[get(Time) == PreviousTime]
PreviousCens[get(LifeStatus)== TRUE, get(IdTree)]
unique(PreviousCens[get(LifeStatus)== TRUE, get(IdTree)])
unique(Data[,get(Plot)])
Data[,get(Plot)]
Data[,Plot, with = FALSE]
# IdTree's alive at the previous census, in the plot and subplot in common between last and previous census
PreviousCensPlot <- unique(Data[,Plot, with = FALSE])
unique(Data[,Plot, with = FALSE])
# IdTree's alive at the previous census, in the plot and subplot in common between last and previous census
PreviousCensPlot <- unique(Data[,c(Plot), with = FALSE])
unique(Data[,c(Plot), with = FALSE])
library(TreeData)
library(data.table)
unique(Data[,c(Plot), with = FALSE])
unique(Data[,get(Plot)])
max(Data[,get(Time)])
usethis::use_data_raw()
usethis::use_data_raw(ParacouSubsetWide)
usethis::use_data_raw(ParacouSubsetWide.rda)
usethis::use_data_raw(ParacouSubset)
library(TreeData)
