#### Size with bad precision (pas .0 ou .5) ####
wrong <- c(0.2, 0.3, 0.569, 0.8)
modif <- Data[, .I[sample(.N, nError)]]
Data[modif, DBH := DBH + sample(wrong,1)]
# Data[modif] # to check
#### Resurrected tree ####
Last_census <- Data[CensusYear == 2020]
Previous_census <- Data[CensusYear == 2019]
# See if a resurrected tree already exists
MortPrev <- Previous_census[LifeStatus == 0 & IdTree %in% Last_census[LifeStatus == 1, IdTree], IdTree]
# dead in 2019, alive in 2020
Previous_census[IdTree == 101410] # dead
Last_census[IdTree == 101410] # alive
#### Duplicated TreeFieldNum in plot-subplot association ####
modif <- Data[, .I[sample(.N, nError)]] # 1 row to change
duplicatedFieldNum <- Data[!(row.names(Data)) %in% modif & # all rows != modif
Plot == Data[modif, Plot] & # same plot as modif
SubPlot == Data[modif, SubPlot], # same subplot as modif
sample(TreeFieldNum,1)] # 1 TreeFieldNum to duplicate
Data[modif, TreeFieldNum := duplicatedFieldNum] # on the row to modif, we duplicate the TreeFieldNum
# Data[TreeFieldNum == duplicatedFieldNum] # to check
#### Duplicated IdTree in a census ####
idModif <- Last_census[, sample(IdTree, nError)] # selectionner 1 IdTree (de 2019) Ã  modifier
duplicatedID <- Last_census[!(IdTree %in% idModif), sample(IdTree, 1)] # select 1 (2019) IdTree != modif to duplicate
Data[IdTree %in% idModif, IdTree := duplicatedID] # we duplicate the IdTree on the previous selected IdTree
Data[CensusYear == 2020 & IdTree == duplicatedID] # to check
#### Unseen tree but alive tree after ####
#### Abnomal growth ####
#### Abnomal recruit ####
#### Save this test data in the package ####
TestData <- Data
usethis::use_data(TestData, overwrite = TRUE)
duplicatedFieldNum
View(TestData)
devtools::load_all(".")
data("TestData") # import data
# INPUTS
Data = TestData
## data.frame to data.table
setDT(Data) # with "set" "<-" is not necessary
# Create "PlotSubNum" = "Site/CensusYear/Plot/SubPlot/TreeFieldNum"
Data[, PlotSubNum := paste(Site, CensusYear, Plot, SubPlot, TreeFieldNum, sep = "/")]
# y = 2018
# p=1
# c= 2
duplicated_num <- num <- vector("character")
# if any duplicats in this col
if(anyDuplicated(Data$PlotSubNum) != 0) {
# For each site
for (s in unique(na.omit(Data$Site))) {
# For each census
for (y in unique(na.omit(Data$CensusYear))) {
# For each plot
for (p in unique(na.omit(Data$Plot))) {
# For each SubPlot in this plot
for (c in unique(na.omit(Data[Data$Plot==p, "SubPlot"]))) {
num <- Data[Data$Site == s & Data$CensusYear == y
& Data$Plot == p & Data$SubPlot == c,]$TreeFieldNum # all the TreeFieldNum for each Plot-SubPlot combination
# if there are several TreeFieldNum per Plot-SubPlot combination
if(anyDuplicated(num) != 0){
duplicated_num <- unique(num[duplicated(num)])
Data <- GenerateComment(Data,
condition =
Data[,Site] == s & Data[,CensusYear] == y
& Data[,Plot] == p & Data[,SubPlot] == c
& Data[,TreeFieldNum] %in% duplicated_num,
comment = "Duplicate TreeFieldNum in the same Plot and SubPlot")
}
} # end subplot loop
} # end plot loop
} # end year loop
} # end site loop
}
Data[TreeFieldNum == duplicated_num,.(CensusYear = sort(CensusYear), Plot, SubPlot, TreeFieldNum, Comment)] # to check (1 duplicate)
y = 2016
p=1
c= 3
num <- Data[Data$Site == s & Data$CensusYear == y
& Data$Plot == p & Data$SubPlot == c,]$TreeFieldNum # all the TreeFieldNum for each Plot-SubPlot combination
anyDuplicated(num)
duplicated_num <- unique(num[duplicated(num)])
Data <- GenerateComment(Data,
condition =
Data[,Site] == s & Data[,CensusYear] == y
& Data[,Plot] == p & Data[,SubPlot] == c
& Data[,TreeFieldNum] %in% duplicated_num,
comment = "Duplicate TreeFieldNum in the same Plot and SubPlot")
Data[TreeFieldNum == duplicated_num,.(CensusYear = sort(CensusYear), Plot, SubPlot, TreeFieldNum, Comment)] # to check (1 duplicate)
# Create "PlotSubNum" = "Site/CensusYear/Plot/SubPlot/TreeFieldNum"
Data[, PlotSubNum := paste(Site, CensusYear, Plot, SubPlot, TreeFieldNum, sep = "/")]
# y = 2016
# p=1
# c= 3
duplicated_num <- num <- vector("character")
# if any duplicats in this col
if(anyDuplicated(Data$PlotSubNum) != 0) {
# For each site
for (s in unique(na.omit(Data$Site))) {
# For each census
for (y in unique(na.omit(Data$CensusYear))) {
# For each plot
for (p in unique(na.omit(Data$Plot))) {
# For each SubPlot in this plot
for (c in unique(na.omit(Data[Data$Plot==p, "SubPlot"]))) {
num <- Data[Data$Site == s & Data$CensusYear == y
& Data$Plot == p & Data$SubPlot == c,]$TreeFieldNum # all the TreeFieldNum for each Plot-SubPlot combination
# if there are several TreeFieldNum per Plot-SubPlot combination
if(anyDuplicated(num) != 0){
duplicated_num <- unique(num[duplicated(num)])
Data <- GenerateComment(Data,
condition =
Data[,Site] == s & Data[,CensusYear] == y
& Data[,Plot] == p & Data[,SubPlot] == c
& Data[,TreeFieldNum] %in% duplicated_num,
comment = "Duplicate TreeFieldNum in the same Plot and SubPlot")
}
} # end subplot loop
} # end plot loop
} # end year loop
} # end site loop
}
Data[TreeFieldNum == duplicated_num,.(CensusYear = sort(CensusYear), Plot, SubPlot, TreeFieldNum, Comment)] # to check (1 duplicate)
y = 2017
num <- Data[Data$Site == s & Data$CensusYear == y
& Data$Plot == p & Data$SubPlot == c,]$TreeFieldNum # all the TreeFieldNum for each Plot-SubPlot combination
anyDuplicated(num)
# if there are several TreeFieldNum per Plot-SubPlot combination
if(anyDuplicated(num) != 0){
duplicated_num <- unique(num[duplicated(num)])
Data <- GenerateComment(Data,
condition =
Data[,Site] == s & Data[,CensusYear] == y
& Data[,Plot] == p & Data[,SubPlot] == c
& Data[,TreeFieldNum] %in% duplicated_num,
comment = "Duplicate TreeFieldNum in the same Plot and SubPlot")
}
# p=1
# c= 3
duplicated_num <- num <- vector("character")
# if any duplicats in this col
if(anyDuplicated(Data$PlotSubNum) != 0) {
# For each site
for (s in unique(na.omit(Data$Site))) {
# For each census
for (y in unique(na.omit(Data$CensusYear))) {
# For each plot
for (p in unique(na.omit(Data$Plot))) {
# For each SubPlot in this plot
for (c in unique(na.omit(Data[Data$Plot==p, "SubPlot"]))) {
num <- Data[Data$Site == s & Data$CensusYear == y
& Data$Plot == p & Data$SubPlot == c,]$TreeFieldNum # all the TreeFieldNum for each Plot-SubPlot combination
# if there are several TreeFieldNum per Plot-SubPlot combination
if(anyDuplicated(num) != 0){
duplicated_num <- unique(num[duplicated(num)])
Data <- GenerateComment(Data,
condition =
Data[,Site] == s & Data[,CensusYear] == y
& Data[,Plot] == p & Data[,SubPlot] == c
& Data[,TreeFieldNum] %in% duplicated_num,
comment = "Duplicate TreeFieldNum in the same Plot and SubPlot")
}
} # end subplot loop
} # end plot loop
} # end year loop
} # end site loop
}
anyDuplicated(Data$PlotSubNum)
num <- Data[Data$Site == s & Data$CensusYear == y
& Data$Plot == p & Data$SubPlot == c,]$TreeFieldNum # all the TreeFieldNum for each Plot-SubPlot combination
# if any duplicats in this col
if(anyDuplicated(Data$PlotSubNum) != 0) {
# For each site
for (s in unique(na.omit(Data$Site))) {
# For each census
for (y in unique(na.omit(Data$CensusYear))) {
# For each plot
for (p in unique(na.omit(Data$Plot))) {
# For each SubPlot in this plot
for (c in unique(na.omit(Data[Data$Plot==p, "SubPlot"]))) {
num <- Data[Data$Site == s & Data$CensusYear == y
& Data$Plot == p & Data$SubPlot == c,]$TreeFieldNum # all the TreeFieldNum for each Plot-SubPlot combination
# if there are several TreeFieldNum per Plot-SubPlot combination
if(anyDuplicated(num) != 0){
duplicated_num <- unique(num[duplicated(num)])
Data <- GenerateComment(Data,
condition =
Data[,Site] == s & Data[,CensusYear] == y
& Data[,Plot] == p & Data[,SubPlot] == c
& Data[,TreeFieldNum] %in% duplicated_num,
comment = "Duplicate TreeFieldNum in the same Plot and SubPlot")
} else {num <- vector("character")}
} # end subplot loop
} # end plot loop
} # end year loop
} # end site loop
}
# For each site
for (s in unique(na.omit(Data$Site))) {
# For each census
for (y in unique(na.omit(Data$CensusYear))) {
# For each plot
for (p in unique(na.omit(Data$Plot))) {
# For each SubPlot in this plot
for (c in unique(na.omit(Data[Data$Plot==p, "SubPlot"]))) {
num <- Data[Data$Site == s & Data$CensusYear == y
& Data$Plot == p & Data$SubPlot == c,]$TreeFieldNum # all the TreeFieldNum for each Plot-SubPlot combination
# if there are several TreeFieldNum per Plot-SubPlot combination
if(anyDuplicated(num) != 0){
duplicated_num <- unique(num[duplicated(num)])
Data <- GenerateComment(Data,
condition =
Data[,Site] == s & Data[,CensusYear] == y
& Data[,Plot] == p & Data[,SubPlot] == c
& Data[,TreeFieldNum] %in% duplicated_num,
comment = "Duplicate TreeFieldNum in the same Plot and SubPlot")
num <- vector("character")
} else {num <- vector("character")}
} # end subplot loop
} # end plot loop
} # end year loop
} # end site loop
num <- Data[Data$Site == s & Data$CensusYear == y
& Data$Plot == p & Data$SubPlot == c,]$TreeFieldNum # all the TreeFieldNum for each Plot-SubPlot combination
num <- vector("character")
num <- Data[Data$Site == s & Data$CensusYear == y
& Data$Plot == p & Data$SubPlot == c,]$TreeFieldNum # all the TreeFieldNum for each Plot-SubPlot combination
Data[Data$Site == s & Data$CensusYear == y
& Data$Plot == p & Data$SubPlot == c,]
Data[Data$Site == s & Data$CensusYear == y
& Data$Plot == p & Data$SubPlot == c,]
unique(na.omit(Data$Site))
unique(na.omit(Data$CensusYear))
y in unique(na.omit(Data$CensusYear))
unique(na.omit(Data[Data$Plot==p, "SubPlot"]))
Data[Data$Plot==p, "SubPlot"]
Data[Data$Plot==p, "SubPlot"]
unique(na.omit(Data[Data$Plot==p, "SubPlot"]))
unique(na.omit(Data[Data$Plot==p, SubPlot]))
# y = 2017
# p=1
# c= 3
duplicated_num <- num <- vector("character")
# if any duplicats in this col
if(anyDuplicated(Data$PlotSubNum) != 0) {
# For each site
for (s in unique(na.omit(Data$Site))) {
# For each census
for (y in unique(na.omit(Data$CensusYear))) {
# For each plot
for (p in unique(na.omit(Data$Plot))) {
# For each SubPlot in this plot
for (c in unique(na.omit(Data[Data$Plot==p, SubPlot]))) {
num <- Data[Data$Site == s & Data$CensusYear == y
& Data$Plot == p & Data$SubPlot == c,]$TreeFieldNum # all the TreeFieldNum for each Plot-SubPlot combination
# if there are several TreeFieldNum per Plot-SubPlot combination
if(anyDuplicated(num) != 0){
duplicated_num <- unique(num[duplicated(num)])
Data <- GenerateComment(Data,
condition =
Data[,Site] == s & Data[,CensusYear] == y
& Data[,Plot] == p & Data[,SubPlot] == c
& Data[,TreeFieldNum] %in% duplicated_num,
comment = "Duplicate TreeFieldNum in the same Plot and SubPlot")
num <- vector("character")
} else {num <- vector("character")}
} # end subplot loop
} # end plot loop
} # end year loop
} # end site loop
}
knitr::opts_chunk$set(echo = TRUE)
library(TreeData)
library(data.table)
data("TestData") # import data
# INPUTS
Data = TestData
## data.frame to data.table
setDT(Data) # with "set" "<-" is not necessary
if(anyDuplicated(Data) != 0)
Data <- unique(Data)
# Check bota : Family/Genus/Species/ScientificName/VernName
# Check size : DBH, POM(?)
Vars <- c("Plot", "SubPlot", "CensusYear", "TreeFieldNum", "IdTree",
"DBH", "POM", "TreeHeight", "StemHeight", "MeasCode",
"Xutm", "Yutm", "Family", "Genus", "Species", "VernName")
for (v in 1:length(Vars)) {
if(Vars[v] %in% names(Data)){ # If the column exists
Data <- GenerateComment(Data,
condition = is.na(Data[,get(Vars[v])]),
comment = paste0("Missing value in ", Vars[v]))
}
}
Data[Comment != ""] # to check (13 comments)
Vars <- c("DBH", "POM", "TreeHeight", "StemHeight")
for (v in 1:length(Vars)) {
if(Vars[v] %in% names(Data)){ # If the column exists
Data <- GenerateComment(Data,
condition = Data[,get(Vars[v])] == 0,
comment = paste0(Vars[v]," cannot be 0"))
}
}
Data[get(Vars) == 0] # to check
# Create "PlotSubNum" = "Site/CensusYear/Plot/SubPlot/TreeFieldNum"
Data[, PlotSubNum := paste(Site, CensusYear, Plot, SubPlot, TreeFieldNum, sep = "/")]
# y = 2017
# p=1
# c= 3
duplicated_num <- num <- vector("character")
# if any duplicats in this col
if(anyDuplicated(Data$PlotSubNum) != 0) {
# For each site
for (s in unique(na.omit(Data$Site))) {
# For each census
for (y in unique(na.omit(Data$CensusYear))) {
# For each plot
for (p in unique(na.omit(Data$Plot))) {
# For each SubPlot in this plot
for (c in unique(na.omit(Data[Data$Plot==p, SubPlot]))) {
num <- Data[Data$Site == s & Data$CensusYear == y
& Data$Plot == p & Data$SubPlot == c,]$TreeFieldNum # all the TreeFieldNum for each Plot-SubPlot combination
# if there are several TreeFieldNum per Plot-SubPlot combination
if(anyDuplicated(num) != 0){
duplicated_num <- unique(num[duplicated(num)])
Data <- GenerateComment(Data,
condition =
Data[,Site] == s & Data[,CensusYear] == y
& Data[,Plot] == p & Data[,SubPlot] == c
& Data[,TreeFieldNum] %in% duplicated_num,
comment = "Duplicate TreeFieldNum in the same Plot and SubPlot")
num <- vector("character")
} else {num <- vector("character")}
} # end subplot loop
} # end plot loop
} # end year loop
} # end site loop
}
Data[TreeFieldNum == duplicated_num,.(CensusYear = sort(CensusYear), Plot, SubPlot, TreeFieldNum, Comment)] # to check (1 duplicate)
duplicated_ID <- CorresIDs <- vector("character")
# For each site
for (s in unique(na.omit(Data$Site))) {
correspondances <- na.omit(unique(
Data[Data$Site == s, .(IdTree, Plot, SubPlot, TreeFieldNum)] # & Data$CensusYear == y
))
CorresIDs <- correspondances[, IdTree] # .(IdTree) all the Idtree's having a unique P-SubP-TreeFieldNum combination
if(!identical(CorresIDs, unique(CorresIDs))){ # check if it's the same length, same ids -> 1 asso/ID
duplicated_ID <- unique(CorresIDs[duplicated(CorresIDs)]) # identify the Idtree(s) having several P-SubP-TreeFieldNum combinations
Data <- GenerateComment(Data,
condition =
Data[,Site] == s
& Data[,IdTree] %in% duplicated_ID,
comment = "Non-unique association of the IdTree with Plot, SubPlot and TreeFieldNum")
}
} # end site loop
unique(Data[IdTree %in% duplicated_ID,
.(IdTree = sort(IdTree), Plot, SubPlot, TreeFieldNum, Comment)]) # to check
# Create "SitYearID" = "Site/CensusYear/IdTree"
Data[, SitYearID := paste(Site, CensusYear, IdTree, sep = "/")]
duplicated_ids <- ids <- vector("character")
# if any duplicats in this col
if(anyDuplicated(Data$SitYearID) != 0){
# For each site
for (s in unique(na.omit(Data$Site))) {
# For each census
for (y in unique(na.omit(Data$CensusYear))) {
ids <- Data[Data$Site == s & Data$CensusYear == y,]$IdTree # all the IdTree for each Site and CensusYear combination
# if there are several IdTree per Site and CensusYear combination
if(anyDuplicated(ids) != 0){
duplicated_ids <- unique(ids[duplicated(ids)])
Data <- GenerateComment(Data,
condition =
Data[,Site] == s & Data[,CensusYear] == y
& Data[,IdTree] %in% duplicated_ids,
comment = "Duplicated IdTree in the census")
}
} # end year loop
} # end site loop
}
Data[IdTree == duplicated_ids,.(CensusYear = sort(CensusYear), Plot, SubPlot, TreeFieldNum, IdTree, Comment)] # to check
View(Data)
duplicated_ID <- CorresIDs <- vector("character")
# For each site
for (s in unique(na.omit(Data$Site))) {
CoordIDCombination <- na.omit(unique(
Data[Data$Site == s, .(IdTree, Xutm, Yutm)]
))
CorresIDs <- CoordIDCombination[, IdTree] # .(IdTree) all the Idtree's having a unique X-Yutm) combination
if(!identical(CorresIDs, unique(CorresIDs))){ # check if it's the same length, same ids -> 1 asso/ID
duplicated_ID <- unique(CorresIDs[duplicated(CorresIDs)]) # identify the Idtree(s) having several P-SubP-TreeFieldNum combinations
Data <- GenerateComment(Data,
condition =
Data[,Site] == s
& Data[,IdTree] %in% duplicated_ID,
comment = "Different coordinates (Xutm, Yutm) for a same IdTree")
}
} # end site loop
unique(Data[IdTree %in% duplicated_ID,
.(IdTree = sort(IdTree), Xutm, Yutm, Comment)]) # to check
duplicated_ID <- CorresIDs <- vector("character")
# For each site
for (s in unique(na.omit(Data$Site))) {
BotaIDCombination <- na.omit(unique(
Data[Data$Site == s, .(IdTree, Family, ScientificName, VernName)]
))
CorresIDs <- BotaIDCombination[, IdTree] # .(IdTree) all the Idtree's having a unique X-Yutm) combination
if(!identical(CorresIDs, unique(CorresIDs))){ # check if it's the same length, same ids -> 1 asso/ID
duplicated_ID <- unique(CorresIDs[duplicated(CorresIDs)]) # identify the Idtree(s) having several P-SubP-TreeFieldNum combinations
Data <- GenerateComment(Data,
condition =
Data[,Site] == s
& Data[,IdTree] %in% duplicated_ID,
comment = "Different botanical informations (Family, ScientificName or VernName) for a same IdTree")
}
} # end site loop
unique(Data[IdTree %in% duplicated_ID,
.(IdTree = sort(IdTree), Family, ScientificName, VernName, Comment)]) # to check
library(TreeData)
library(TreeData)
library(TreeData)
devtools::install_github("VincyaneBadouard/TreeData", build_vignettes = TRUE)
devtools::install_github("VincyaneBadouard/TreeData")
citation("TreeData")
install.packages("shiny")
library(TreeData)
citation("TreeData")
library(TreeData)
citation("TreeData")
library(TreeData)
citation("TreeData")
library(TreeData)
citation("TreeData")
library(TreeData)
library(TreeData)
citation("TreeData")
devtools::install_github("user/repo"
,ref="master"
,auth_token = "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"
)
devtools::install_github("VincyaneBadouard/TreeData"
,ref="master"
,auth_token = "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"
)
detach("package:TreeData", unload = TRUE)
devtools::install_github("VincyaneBadouard/TreeData"
,ref="master"
,auth_token = "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"
)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
library(TreeData)
devtools::install_github("EcoFoG/vernabota", build_vignettes = TRUE)
devtools::install_github("EcoFoG/vernabota", build_vignettes = TRUE)
library(vernabota)
data(PriorAllFG_20220126)
PriorAllFG <- PriorAllFG_20220126 # rename
PriorAllFG[,1:10]
knitr::opts_chunk$set(echo = TRUE)
microbenchmark::microbenchmark(
cat("a"),
cat("b"), times = 1L
)
library(TreeData)
library(TreeData)
library(TreeData)
TreeData?
?TreeData
library(TreeData)
?TreeData
??TreeData
usethis::use_package_doc()
devtools::load_all(".")
devtools::load_all(".")
?TreeData-package
?TreeData
?LoggingLab
devtools::load_all(".")
?TreeData
library(TreeData)
?TreeData
devtools::install_github("VincyaneBadouard/LoggingLab", build_vignettes = TRUE)
devtools::install_github("VincyaneBadouard/LoggingLab", build_vignettes = FALSE)
knitr::opts_chunk$set(echo = TRUE)
data("TestData") # import data
force(TestData)
View(TestData)
knitr::opts_chunk$set(echo = TRUE)
library(TreeData)
library(data.table)
data("TestData") # import data
# INPUTS
Data = TestData
## data.frame to data.table
setDT(Data) # with "set" "<-" is not necessary
# Args
deathconfirmation = 2 # (numeric)
usesize = TRUE # (logical)
View(Data)
Data[IdTree == "100658"]
Data[order(CensusYear)]
DataTree <- Data[IdTree == "100658"]
DataTree[order(CensusYear)]
View(DataTree)
rbindlist(list(DataTree, list(5, 6)))
Data[IdTree == "100658"]
rbind(DataTree, 6:9) # insert rows
rbind(1, CensusYear = 2015, LifeStatus == FALSE) # insert rows
rbind(1, CensusYear = 2015, LifeStatus = FALSE) # insert rows
rbindlist(list(DataTree, data.frame(CensusYear = 2015, LifeStatus = FALSE)))
AddR <- DataTree[2:5,]
View(AddR)
