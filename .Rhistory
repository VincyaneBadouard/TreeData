cresc[raised-1]  <- NA # cresc[which(is.na(cresc))+1] <- NA
cresc_abs[raised-1] <- NA # cresc_abs[which(is.na(cresc_abs))+1] <- NA
# Put NA if other abnormal incrementation
AbnormalCrescs <- (cresc >= PositiveGrowthThreshold | cresc_abs < NegativeGrowthThreshold)
cresc[AbnormalCrescs]  <- NA
cresc_abs[AbnormalCrescs]  <- NA
if("individual" %in% CorrectionType) {
## 1. DBH[init shift] -------------------------------------------------------------------------------------------
# Check that only non-abnormal growths are kept
if(length(which(cresc[!is.na(cresc)] >= PositiveGrowthThreshold |
cresc_abs[!is.na(cresc_abs)] < NegativeGrowthThreshold)) == 0){
# Replace NA by the correction --------------------------------------------------------------------------------
cresc_Corr <- RegressionInterpolation(Y = cresc, X = Time[-1], CorrectionType = CorrectionType) # Compute the corrected cresc
for(rs in 1:length(raised)){  # as many rs as POM changes
# DBH[init shift] = previous value + Estimated cresc
DBHCor[raised[rs]] <- DBHCor[raised[rs]-1] + cresc_Corr[raised[rs]-1]*diff(Time)[raised[rs]-1] # Correct with the corrected cresc, the corrected DBH
# Add the column with the correction method  ------------------------------------------------------------------------
if("quadratic" %in% CorrectionType & length(which(!is.na(Diameter))) > 3){
DataTree[raised[rs], DiameterCorrectionMeth := "quadratic"]
}else{
DataTree[raised[rs], DiameterCorrectionMeth := "linear"]}
if(length(DBHCor) > (raised[rs])){ # if the init shift is not the last diameter value
## 2. DBH[shift] --------------------------------------------------------------------------------------------
# If NA in cresc_abs replace it by a interpolation value
cresc_abs_Corr <- RegressionInterpolation(Y = cresc_abs, X = Time[-1], CorrectionType = CorrectionType) # Compute the corrected cresc
for(i in (raised[rs]+1): min(raised[rs+1]-1, length(DBHCor), na.rm = TRUE)){ # i = each value in a shift
# DBH[shift] = previous value + their cresc_abs
DBHCor[i] <- # then correct the other shift values
DBHCor[i-1] + # New position of the previous value
cresc_abs_Corr[i-1] #  cresc_abs of the value we are correcting, not recalculated
# Add the column with the correction method  ------------------------------------------------------------------------
DataTree[i, DiameterCorrectionMeth := "shift realignment"]
} # end i loop
} # end : if the init shift is not the last diameter value
} # end rs loop
}else{stop("There are still abnormal growths not detected upstream (method to be improved)")}
}
if(!"individual"%in% CorrectionType & "phylogenetic hierarchical" %in% CorrectionType){
DataTree <- PhylogeneticHierarchicalCorrection(
DataTree = DataTree,
Data = Data,
cresc = cresc, cresc_abs = cresc_abs, cresc_abn = raised-1,
DBHCor = DBHCor, Time = Time,
PositiveGrowthThreshold = PositiveGrowthThreshold,
NegativeGrowthThreshold = NegativeGrowthThreshold,
DBHRange = DBHRange, MinIndividualNbr = MinIndividualNbr)
DBHCor <- DataTree[,DBHCor]
}
## 3. + trunk width reduction factor (if POM change (only?)) ------------------------------------------------------
} # End correction "POM change"
}# if there are POM changes
}# if there are POMs
}# Correction with POM
# Punctual/shift error detection  + replace with NA if punctual ---------------------------------------------------------
if(any("punctual" %in% WhatToCorrect | "shift" %in% WhatToCorrect)){
DBHCor <- PunctualErrorDetection(
DBHCor = DBHCor, Time = Time,
PositiveGrowthThreshold = PositiveGrowthThreshold, NegativeGrowthThreshold = NegativeGrowthThreshold,
TrustMeasSet = TrustMeasSet,
DetectOnly = DetectOnly)
# ça serait bien de renvoyer qqchose si un shift est detecté pour être plus secure (y refléchir)
if("DBHCor" %in% names(DataTree)){
DataTree[, DBHCor := NULL] # remove the DBHCor col to avoid conflict
}
DataTree[,DBHCor := DBHCor]
DataTree <- GenerateComment(DataTree,
condition = (is.na(DataTree[,DBHCor]) & !is.na(DataTree[,Diameter])),
comment = paste0("Abnormal diameter value (punctual error)"))
if(DetectOnly %in% TRUE) DataTree[,DBHCor := NULL] # remove the DBHCor col if we detect only
}
# Shift Correction ------------------------------------------------------------------------------------------------------
if("shift" %in% WhatToCorrect){
## Init shift detection si PunctualErrorDetection() ne s'en est pas chargé --------------------------------------------
### Compute diameter incrementation without the inits shift
cresc <- ComputeIncrementation(Var = DBHCor, Type = "annual", Time = Time)
cresc_abs <- ComputeIncrementation(Var = DBHCor, Type = "absolute", Time = Time)
### Detect abnormal growth --------------------------------------------------------------------------------------------
cresc_abn <- which(cresc >= PositiveGrowthThreshold | cresc_abs < NegativeGrowthThreshold) # abnormal values indices
# le retour à la normale est considéré comme une erreur (perte excessive)
if(length(cresc_abn) != 0) { # if there are abnormal values
if("DBHCor" %in% names(DataTree)){
DataTree[, DBHCor := NULL] # remove the DBHCor col to avoid conflict
}
DataTree[,DBHCor := DBHCor]
DataTree <- GenerateComment(DataTree,
condition = as.numeric(rownames(DataTree)) %in% (cresc_abn+1),
comment = paste0("Abnormal diameter value (shift error)"))
if(DetectOnly %in% TRUE) DataTree[,DBHCor := NULL] # remove the DBHCor col if we detect only
if(DetectOnly %in% FALSE){
# Remove incr between 2 shifts (take growth only intra seq)
cresc[cresc_abn] <- NA
cresc_abs[cresc_abn] <- NA
if("individual" %in% CorrectionType) {
## 1. DBH[init shift] -----------------------------------------------------------------------------------------------
# Check that only non-abnormal growths are kept
if(length(which(cresc[!is.na(cresc)] >= PositiveGrowthThreshold | cresc_abs[!is.na(cresc_abs)] < NegativeGrowthThreshold))==0){
# Replace NA by the correction ---------------------------------------------------------------------------------
cresc_Corr <- RegressionInterpolation(Y = cresc, X = Time[-1], CorrectionType = CorrectionType) # Compute the corrected cresc
for(rs in 1:length(cresc_abn)){  # as many rs as POM changes
# DBH[init shift] = previous value + Estimated cresc
DBHCor[cresc_abn[rs]+1] <- DBHCor[cresc_abn[rs]] + cresc_Corr[cresc_abn[rs]]*diff(Time)[cresc_abn[rs]] # Correct with the corrected cresc, the corrected DBH
# Add the column with the correction method  ------------------------------------------------------------------------
if("quadratic" %in% CorrectionType & length(which(!is.na(Diameter))) > 3){
DataTree[cresc_abn[rs]+1, DiameterCorrectionMeth := "quadratic"]
}else{
DataTree[cresc_abn[rs]+1, DiameterCorrectionMeth := "linear"]}
## 2. DBH[shift] --------------------------------------------------------------------------------------------
for(i in (cresc_abn[rs]+2): min(cresc_abn[rs+1], length(DBHCor), na.rm = TRUE)){ # i = each value in a shift
# DBH[shift] = previous value + their cresc_abs
# If NA in cresc_abs replace it by a interpolation value
cresc_abs_Corr <- RegressionInterpolation(Y = cresc_abs, X = Time[-1], CorrectionType = CorrectionType) # Compute the corrected cresc
DBHCor[i] <- # then correct the other shift values
DBHCor[i-1] + # New position of the previous value
cresc_abs_Corr[i-1] #  cresc_abs of the value we are correcting, not recalculated
# Add the column with the correction method  ------------------------------------------------------------------------
DataTree[i, DiameterCorrectionMeth := "shift realignment"]
}
}
}else{stop("There are still abnormal growths not detected upstream (method to be improved)")}
}
if(!"individual"%in% CorrectionType & "phylogenetic hierarchical" %in% CorrectionType){
DataTree <- PhylogeneticHierarchicalCorrection(
DataTree = DataTree,
Data = Data,
cresc = cresc, cresc_abs = cresc_abs, cresc_abn = cresc_abn,
DBHCor = DBHCor, Time = Time,
PositiveGrowthThreshold = PositiveGrowthThreshold,
NegativeGrowthThreshold = NegativeGrowthThreshold,
DBHRange = DBHRange, MinIndividualNbr = MinIndividualNbr)
DBHCor <- DataTree[,DBHCor]
}
## 3. + trunk width reduction factor (if POM change (only?)) ----------------------------------------------------------
} # End shift correction
}
}
DetectOnly %in% FALSE & "punctual" %in% WhatToCorrect & any(is.na(DBHCor))
# Compute diameter incrementation without the abnormal values
cresc <- ComputeIncrementation(Var = DBHCor, Type = "annual", Time = Time)
cresc_abs <- ComputeIncrementation(Var = DBHCor, Type = "absolute", Time = Time)
length(which(cresc[!is.na(cresc)] >= PositiveGrowthThreshold | cresc_abs[!is.na(cresc_abs)] < NegativeGrowthThreshold))==0
# Replace NA by the correction ------------------------------------------------------------------------------------------
cresc_Corr <- RegressionInterpolation(Y = cresc, X = Time[-1], CorrectionType = CorrectionType) # Compute the corrected cresc
which(is.na(DBHCor))
i=1
# DBH[error] = previous value + Estimated cresc
DBHCor[i] <- DBHCor[i-1] + cresc_Corr[i-1]*diff(Time)[i-1] # Correct with the corrected cresc, the corrected DBH
cresc_Corr
if(i == 1) DBHCor[i] <- DBHCor[i+1] - cresc_Corr[i]*diff(Time)[i]
DBHCor
devtools::load_all(".")
library(TreeData)
library(data.table)
data("TestData")
# Remove other errors types (non-unique idTree)
TestData <- TestData[IdTree != "100898"]
# Create test data --------------------------
## Correction --------------------------------------------------------------------------------------------------------------------
Rslt <- DiameterCorrection(
TestData,
PositiveGrowthThreshold = 5,
NegativeGrowthThreshold = -2,
Pioneers = c("Cecropia","Pourouma"),
PioneersGrowthThreshold = 7.5,
TrustMeasSet = "first",
WhatToCorrect = c("POM change", "punctual", "shift"),
CorrectionType = c("quadratic", "linear", "phylogenetic hierarchical"),
DBHRange = 10,
MinIndividualNbr = 5,
Digits = 1L,
TaperParameter = function(DAB, HOM) 0.156 - 0.023 * log(DAB) - 0.021 * log(HOM),
TaperFormula = function(DAB, HOM, TaperParameter) DAB / (2 * exp(- TaperParameter*(HOM - DefaultHOM))),
DetectOnly = FALSE)
devtools::load_all(".")
library(TreeData)
library(data.table)
data("TestData")
# Remove other errors types (non-unique idTree)
TestData <- TestData[IdTree != "100898"]
## Correction --------------------------------------------------------------------------------------------------------------------
Rslt <- DiameterCorrection(
TestData,
PositiveGrowthThreshold = 5,
NegativeGrowthThreshold = -2,
Pioneers = c("Cecropia","Pourouma"),
PioneersGrowthThreshold = 7.5,
TrustMeasSet = "first",
WhatToCorrect = c("POM change", "punctual", "shift"),
CorrectionType = c("quadratic", "linear", "phylogenetic hierarchical"),
DBHRange = 10,
MinIndividualNbr = 5,
Digits = 1L,
TaperParameter = function(DAB, HOM) 0.156 - 0.023 * log(DAB) - 0.021 * log(HOM),
TaperFormula = function(DAB, HOM, TaperParameter) DAB / (2 * exp(- TaperParameter*(HOM - DefaultHOM))),
DetectOnly = FALSE)
devtools::load_all(".")
library(TreeData)
devtools::load_all(".")
library(TreeData)
library(data.table)
data("TestData")
# Remove other errors types (non-unique idTree)
TestData <- TestData[IdTree != "100898"]
## Correction --------------------------------------------------------------------------------------------------------------------
Rslt <- DiameterCorrection(
TestData,
PositiveGrowthThreshold = 5,
NegativeGrowthThreshold = -2,
Pioneers = c("Cecropia","Pourouma"),
PioneersGrowthThreshold = 7.5,
TrustMeasSet = "first",
WhatToCorrect = c("POM change", "punctual", "shift"),
CorrectionType = c("quadratic", "linear", "phylogenetic hierarchical"),
DBHRange = 10,
MinIndividualNbr = 5,
Digits = 1L,
TaperParameter = function(DAB, HOM) 0.156 - 0.023 * log(DAB) - 0.021 * log(HOM),
TaperFormula = function(DAB, HOM, TaperParameter) DAB / (2 * exp(- TaperParameter*(HOM - DefaultHOM))),
DetectOnly = FALSE)
View(Rslt)
Data = TestData
Data <- GenerateComment(Data,
condition = is.na(Data[, Diameter]),
comment = "Missing value in 'Diameter'")
View(Data)
devtools::load_all(".")
library(TreeData)
library(data.table)
data("TestData")
# Remove other errors types (non-unique idTree)
TestData <- TestData[IdTree != "100898"]
## Correction --------------------------------------------------------------------------------------------------------------------
Rslt <- DiameterCorrection(
TestData,
PositiveGrowthThreshold = 5,
NegativeGrowthThreshold = -2,
Pioneers = c("Cecropia","Pourouma"),
PioneersGrowthThreshold = 7.5,
TrustMeasSet = "first",
WhatToCorrect = c("POM change", "punctual", "shift"),
CorrectionType = c("quadratic", "linear", "phylogenetic hierarchical"),
DBHRange = 10,
MinIndividualNbr = 5,
Digits = 1L,
TaperParameter = function(DAB, HOM) 0.156 - 0.023 * log(DAB) - 0.021 * log(HOM),
TaperFormula = function(DAB, HOM, TaperParameter) DAB / (2 * exp(- TaperParameter*(HOM - DefaultHOM))),
DetectOnly = FALSE)
View(Rslt)
# Comment and Methode if correction
expect_true(all(!is.na(Rslt[DBHCor != Diameter, DiameterCorrectionMeth]))) # method when the DBH has been corrected
Rslt[DBHCor != Diameter, DiameterCorrectionMeth]
View(Rslt)
## Correction --------------------------------------------------------------------------------------------------------------------
Rslt <- DiameterCorrection(
TestData,
PositiveGrowthThreshold = 5,
NegativeGrowthThreshold = -2,
Pioneers = c("Cecropia","Pourouma"),
PioneersGrowthThreshold = 7.5,
TrustMeasSet = "first",
WhatToCorrect = c("POM change", "punctual", "shift"),
CorrectionType = c("quadratic", "linear", "phylogenetic hierarchical"),
DBHRange = 10,
MinIndividualNbr = 5,
Digits = 2L,
TaperParameter = function(DAB, HOM) 0.156 - 0.023 * log(DAB) - 0.021 * log(HOM),
TaperFormula = function(DAB, HOM, TaperParameter) DAB / (2 * exp(- TaperParameter*(HOM - DefaultHOM))),
DetectOnly = FALSE)
View(Rslt)
# Comment and Methode if correction
expect_true(all(!is.na(Rslt[DBHCor != Diameter, DiameterCorrectionMeth]))) # method when the DBH has been corrected
expect_true(all(Rslt[DBHCor != Diameter, Comment] != "")) # comment when the DBH has been corrected
## Correction --------------------------------------------------------------------------------------------------------------------
Rslt <- DiameterCorrection(
TestData,
PositiveGrowthThreshold = 5,
NegativeGrowthThreshold = -2,
Pioneers = c("Cecropia","Pourouma"),
PioneersGrowthThreshold = 7.5,
TrustMeasSet = "first",
WhatToCorrect = c("POM change", "punctual", "shift"),
CorrectionType = c("quadratic", "linear", "phylogenetic hierarchical"),
DBHRange = 10,
MinIndividualNbr = 5,
Digits = 3L,
TaperParameter = function(DAB, HOM) 0.156 - 0.023 * log(DAB) - 0.021 * log(HOM),
TaperFormula = function(DAB, HOM, TaperParameter) DAB / (2 * exp(- TaperParameter*(HOM - DefaultHOM))),
DetectOnly = FALSE)
# Comment and Methode if correction
expect_true(all(!is.na(Rslt[DBHCor != Diameter, DiameterCorrectionMeth]))) # method when the DBH has been corrected
# Comment and Methode if correction
expect_true(all(!is.na(Rslt[DBHCor != Diameter, DiameterCorrectionMeth]))) # method when the DBH has been corrected
## Correction --------------------------------------------------------------------------------------------------------------------
Rslt <- DiameterCorrection(
TestData,
PositiveGrowthThreshold = 5,
NegativeGrowthThreshold = -2,
Pioneers = c("Cecropia","Pourouma"),
PioneersGrowthThreshold = 7.5,
TrustMeasSet = "first",
WhatToCorrect = c("POM change", "punctual", "shift"),
CorrectionType = c("quadratic", "linear", "phylogenetic hierarchical"),
DBHRange = 10,
MinIndividualNbr = 5,
Digits = 5L,
TaperParameter = function(DAB, HOM) 0.156 - 0.023 * log(DAB) - 0.021 * log(HOM),
TaperFormula = function(DAB, HOM, TaperParameter) DAB / (2 * exp(- TaperParameter*(HOM - DefaultHOM))),
DetectOnly = FALSE)
# Comment and Methode if correction
expect_true(all(!is.na(Rslt[DBHCor != Diameter, DiameterCorrectionMeth]))) # method when the DBH has been corrected
View(Rslt)
## Correction --------------------------------------------------------------------------------------------------------------------
Rslt <- DiameterCorrection(
TestData,
PositiveGrowthThreshold = 5,
NegativeGrowthThreshold = -2,
Pioneers = c("Cecropia","Pourouma"),
PioneersGrowthThreshold = 7.5,
TrustMeasSet = "first",
WhatToCorrect = c("POM change", "punctual", "shift"),
CorrectionType = c("quadratic", "linear", "phylogenetic hierarchical"),
DBHRange = 10,
MinIndividualNbr = 5,
Digits = 1L,
TaperParameter = function(DAB, HOM) 0.156 - 0.023 * log(DAB) - 0.021 * log(HOM),
TaperFormula = function(DAB, HOM, TaperParameter) DAB / (2 * exp(- TaperParameter*(HOM - DefaultHOM))),
DetectOnly = FALSE)
# Comment and Methode if correction
expect_true(all(!is.na(Rslt[DBHCor != round(Diameter, digits = 1L), DiameterCorrectionMeth]))) # method when the DBH has been corrected
## Correction --------------------------------------------------------------------------------------------------------------------
Rslt <- DiameterCorrection(
TestData,
PositiveGrowthThreshold = 5,
NegativeGrowthThreshold = -2,
Pioneers = c("Cecropia","Pourouma"),
PioneersGrowthThreshold = 7.5,
TrustMeasSet = "first",
WhatToCorrect = c("POM change", "punctual", "shift"),
CorrectionType = c("quadratic", "linear", "phylogenetic hierarchical"),
DBHRange = 10,
MinIndividualNbr = 5,
Digits = 2L,
TaperParameter = function(DAB, HOM) 0.156 - 0.023 * log(DAB) - 0.021 * log(HOM),
TaperFormula = function(DAB, HOM, TaperParameter) DAB / (2 * exp(- TaperParameter*(HOM - DefaultHOM))),
DetectOnly = FALSE)
# data("TestData")
DataTree = TestData[IdTree %in% "101376"]
DataTree
Data = TestData
DefaultHOM = 1.3
MinDBH = 10
MaxDBH = 500
PositiveGrowthThreshold = 5
NegativeGrowthThreshold = -2
Pioneers = c("Cecropia","Pourouma")
PioneersGrowthThreshold = 7.5
TrustMeasSet = "first"
WhatToCorrect = c("POM change", "punctual", "shift") # c("POM change", "punctual", "shift")
CorrectionType = c("quadratic", "linear", "phylogenetic hierarchical") # c("taper", "quadratic", "linear", "individual", "phylogenetic hierarchical")
DBHRange = 10
MinIndividualNbr = 5
Digits = 1L
TaperParameter = function(DAB, HOM) 0.156 - 0.023 * log(DAB) - 0.021 * log(HOM)
TaperFormula = function(DAB, HOM, TaperParameter) DAB / (2 * exp(- TaperParameter*(HOM - DefaultHOM)))
DetectOnly = FALSE
# data(TestData)
# DataTree <- TestData[IdTree %in% "100628"]
# DataTree <- DataTree[order(Year)] # order de dt
# DataTree$Diameter <- c(13, 14, 15, 12, 13)
# cresc <- c(0.5, 0.5, NA, 0.5)
# cresc_abs <- c(1, 1, NA, 1)
# cresc_abn <- 3
View(DataTree)
DataTree <- DataTree[order(Year)] # order de dt
DBHCor <- Diameter <- DataTree[, Diameter]
Time <- DataTree[, Year]
# Compute diameter incrementation -----------------------------------------------------------------------------------------
cresc <- ComputeIncrementation(Var = DBHCor, Type = "annual", Time = Time)
cresc_abs <- ComputeIncrementation(Var = DBHCor, Type = "absolute", Time = Time)
# Detect abnormal growth --------------------------------------------------------------------------------------------------
Ncresc_abn <- sum(cresc[!is.na(cresc)] >= PositiveGrowthThreshold |
cresc_abs[!is.na(cresc_abs)] < NegativeGrowthThreshold) # nbr of abnormal values
i=1
# Begin with the census with the highest DBH change
cresc_abn <- which(cresc >= PositiveGrowthThreshold | cresc_abs < NegativeGrowthThreshold) # quels sont les concernés
ab <- cresc_abn[which.max(abs(cresc[cresc_abn]))] # the highest absolute DBH increment (celui qui a initié) (ab in cresc indices)
cresc_abn
# With 4 values surrounding ab
surround <- c(ab - 2, ab - 1, ab + 1, ab + 2) # the 4 values, 2 before & 2 after the error
surround
cresc_abn
# In the DBH seq
surround <- surround[surround > 0 &
surround <= length(cresc)] # de taille maximale [0;longueur de l'incrémentation = length(dbh) -1)]
surround
# Moment of max and min DBH changes around ab (including ab, that should be one of the 2)
sourround_ab <- sort(c(surround, ab)) # ab and its 4 values around in the increasing order
up <- sourround_ab[which.max(cresc[sourround_ab])] # Max growth of this seq
down <- sourround_ab[which.min(cresc[sourround_ab])] # Min growth of this seq
sourround_ab
up
down
length(surround) > 0
isTRUE(up < down & down != ab & cresc[up] * cresc[down] < 0 &
# Compute cresc around the error by skipping the error to check if it's normal
# (cresc and down are cresc indices, to have the corresponding DBH index add +1)
((DBHCor[down + 1] - DBHCor[up]) / (Time[down + 1] - Time[up])) <= PositiveGrowthThreshold &
(DBHCor[down + 1] - DBHCor[up]) >= NegativeGrowthThreshold)
isTRUE(down < up & up != ab & cresc[up] * cresc[down] < 0 &
# Compute cresc around the error by skipping the error to check if it's normal
((DBHCor[up + 1] - DBHCor[down]) / (Time[up + 1] - Time[down])) <= PositiveGrowthThreshold &
(DBHCor[up + 1] - DBHCor[down]) >= -NegativeGrowthThreshold)
down < up & up != ab & cresc[up] * cresc[down] < 0
(DBHCor[up + 1] - DBHCor[down]) / (Time[up + 1] - Time[down])) <= PositiveGrowthThreshold
(DBHCor[up + 1] - DBHCor[down]) / (Time[up + 1] - Time[down])) <= PositiveGrowthThreshold
((DBHCor[up + 1] - DBHCor[down]) / (Time[up + 1] - Time[down])) <= PositiveGrowthThreshold
(DBHCor[up + 1] - DBHCor[down]) >= -NegativeGrowthThreshold))
(DBHCor[up + 1] - DBHCor[down]) >= -NegativeGrowthThreshold)
(DBHCor[up + 1] - DBHCor[down]) >= -NegativeGrowthThreshold)
(DBHCor[up + 1] - DBHCor[down]) >= -NegativeGrowthThreshold
up
NegativeGrowthThreshold
DBHCor[up + 1] - DBHCor[down]
-NegativeGrowthThreshold
devtools::load_all(".")
devtools::load_all(".")
library(TreeData)
library(data.table)
data("TestData")
# Remove other errors types (non-unique idTree)
TestData <- TestData[IdTree != "100898"]
## Correction --------------------------------------------------------------------------------------------------------------------
Rslt <- DiameterCorrection(
TestData,
PositiveGrowthThreshold = 5,
NegativeGrowthThreshold = -2,
Pioneers = c("Cecropia","Pourouma"),
PioneersGrowthThreshold = 7.5,
TrustMeasSet = "first",
WhatToCorrect = c("POM change", "punctual", "shift"),
CorrectionType = c("quadratic", "linear", "phylogenetic hierarchical"),
DBHRange = 10,
MinIndividualNbr = 5,
Digits = 2L,
TaperParameter = function(DAB, HOM) 0.156 - 0.023 * log(DAB) - 0.021 * log(HOM),
TaperFormula = function(DAB, HOM, TaperParameter) DAB / (2 * exp(- TaperParameter*(HOM - DefaultHOM))),
DetectOnly = FALSE)
View(Rslt)
# Comment and Methode if correction
expect_true(all(!is.na(Rslt[DBHCor != round(Diameter, digits = 2L), DiameterCorrectionMeth]))) # method when the DBH has been corrected
expect_true(all(Rslt[DBHCor != round(Diameter, digits = 2L), Comment] != "")) # comment when the DBH has been corrected
detach("package:TreeData", unload = TRUE)
covr::report()
library(TreeData)
library(data.table)
data("TestData")
# Remove other errors types (non-unique idTree)
TestData <- TestData[IdTree != "100898"]
HOMData <- TestData[, HOM = 1.3]
MatrixData <- as.matrix(TestData)
NoDBHData <- TestData[, !c("Diameter")]
HOMData <- copy(TestData)
HOMData[, HOM := 1.3] # data with HOM
MatrixData <- as.matrix(TestData)
NoDBHData <- TestData[, !c("Diameter")]
HOMData <- copy(TestData)
HOMData[, HOM := 1.3] # data with HOM
POMData <- copy(TestData)
POMData[, POM := 1] # data with HOM
expect_message(DiameterCorrection(HOMData,  CorrectionType = "linear"),
regexp = "You have the 'HOM' information in your dataset.
We advise you to correct your diameters also with the 'taper' correction ('CorrectionType' argument)")
expect_message(DiameterCorrection(HOMData,  CorrectionType = "linear"),
regexp = "You have the 'HOM' information in your dataset.
We advise you to correct your diameters also with the 'taper' correction ('CorrectionType' argument)")
devtools::load_all(".")
library(TreeData)
library(data.table)
data("TestData")
# Remove other errors types (non-unique idTree)
TestData <- TestData[IdTree != "100898"]
View(TestData)
# Create test data ----------------------------------------------------------------------------------------------------------------
MatrixData <- as.matrix(TestData)
NoDBHData <- TestData[, !c("Diameter")]
HOMData <- copy(TestData[IdTree == "100658"])
HOMData[, HOM := 1.3] # data with HOM
POMData <- copy(TestData[IdTree == "100658"])
POMData[, POM := 1] # data with HOM
expect_message(DiameterCorrection(HOMData,  CorrectionType = "linear"),
regexp = "You have the 'HOM' information in your dataset.
We advise you to correct your diameters also with the 'taper' correction ('CorrectionType' argument)")
expect_message(DiameterCorrection(HOMData,  CorrectionType = "linear"),
regexp = "You have the 'HOM' information in your dataset")
expect_message(DiameterCorrection(POMData,  CorrectionType = "linear"),
regexp = "You have the 'POM' information in your dataset")
View(POMData)
expect_message(DiameterCorrection(POMData, WhatToCorrect = "punctual"),
regexp = "You have the 'POM' information in your dataset")
expect_message(DiameterCorrection(POMData, CorrectionType = "linear", WhatToCorrect = "punctual"),
regexp = "You have the 'POM' information in your dataset")
library(data.table)
data(TestData)
# Remove other errors types (non-unique idTree)
TestData <- TestData[IdTree != "100898"]
Rslt <- DiameterCorrection(
TestData,
WhatToCorrect = c("POM change", "punctual", "shift"),
CorrectionType = c("quadratic", "phylogenetic hierarchical"))
View(Rslt)
View(Rslt)
devtools::load_all(".")
library(TreeData)
