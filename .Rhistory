# Apply taper correction  -------------------------------------------------------------------------------------------
DataTree[HOM == DefaultHOM, ("DBHCor") := ifelse(is.na(DBHCor) | DBHCor == 0, Diameter, DBHCor)] # At default POM, keep the measured value
DataTree[HOM > DefaultHOM, ("DBHCor") := TaperFormula(DAB = Diameter,
HOM = HOM,
TaperParameter = TaperParameter(DAB = Diameter, HOM = HOM))
]
DataTree <- GenerateComment(DataTree,
condition = ( DataTree[,HOM] > DefaultHOM & !is.na(DataTree[, DBHCor]) ),
comment = "taper",
column = "DiameterCorrectionMeth")
View(DataTree)
devtools::load_all(".")
library(TreeData)
DataTree <- data.table(IdTree = "c",
ScientificName = "Pradosia cochlearia",
Genus = "Pradosia",
Family = "Sapotaceae",
Year = c(seq(2000,2008, by = 2), 2012, 2014,2016, 2020), # 9 Diameter values
Diameter = c(13, 14, 24, 16, 16-4, NA, (16-4)+3, 15-4, (15-4)+2), # 0.5 cm/year
POM = c(0, 0, 0, 0, 1, 1, 1, 2, 2),
HOM = c(1.3, 1.3, 1.3, 1.3, 1.5, 1.5, 1.5, 2, 2))
Rslt <- DiameterCorrectionByTree(DataTree,
TestData,
WhatToCorrect = c("POM change", "punctual", "shift"),
CorrectionType = c("quadratic", "linear", "phylogenetic hierarchical"))
# Compute corrected diameter incrementation
cresc <- ComputeIncrementation(Var = Rslt$DBHCor, Type = "annual", Time = Rslt$Year)
cresc_abs <- ComputeIncrementation(Var = Rslt$DBHCor, Type = "absolute", Time = Rslt$Year)
# Check that no abnormal increments remain
expect_true(all(cresc < 5 | cresc_abs > -2))
expect_true(all(Rslt[DBHCor != Diameter, DiameterCorrectionMeth] != "")) # method when the DBH has been corrected
expect_true(all(Rslt[DBHCor != Diameter, Comment] != "")) # comment when the DBH has been corrected
View(Rslt)
expect_true(all(Rslt[DBHCor != Diameter & DiameterCorrectionMeth !=  "shift realignment", Comment] != "")) # comment when the DBH has been corrected
devtools::load_all(".")
devtools::load_all(".")
library(TreeData)
library(TreeData)
library(data.table)
# Fabaceae Dicorynia guianensis (angelique) "a"
# Lecythidaceae Eschweilera sagotiana (maho noir) "b"
# Chrysobalanaceae Licania alba (koko) "c"
# Fabaceae Eperua falcata (wapa) "d"
Data <- data.table(Site = "Nowhere",
IdTree = c(rep("a", 4), rep("b", 4), rep("c", 4), rep("d", 4), rep("e", 1), rep("f", 1), rep("g", 1)), # 7 ind
Year = c(rep(c(2000:2003), 4), rep(2000, 3)) # 4 years each
)
Data <- Data[order(IdTree, Year)]
Data[, Family := c(rep("Fabaceae", 4), rep("Lecythidaceae", 4), rep("Chrysobalanaceae", 4), rep("Fabaceae", 4), rep("Sapindaceae", 1), rep("Clusiaceae", 1), rep("Burseraceae", 1))]
Data[, Genus := c(rep("Dicorynia", 4), rep("Eschweilera", 4), rep("Licania", 4), rep("Eperua", 4), rep("Indet.Sapindaceae", 1), rep("Tovomita", 1), rep("Protium", 1))]
Data[, Species := c(rep("guianensis", 4), rep("sagotiana", 4), rep("alba", 4), rep("falcata", 4), rep("Indet.", 1), rep("sp.5-CAY", 1), rep("opacum_subsp.rabelianum", 1))]
Data[, VernName := c(rep("angelique", 4), rep("maho noir", 4), rep("koko", 4), rep("wapa", 4), rep(NA, 3))]
# Scientific-vernacular names match table (data.frame) : ScientificVernaTable
ScientificVernaTable <- copy(Data)
ScientificVernaTable <- unique(ScientificVernaTable[, list(Genus, Species, VernName)])
# Create errors
## Missing value in  Family, ScientificName/Genus, species, VernName
Data[IdTree %in% "d" & Year %in% 2000, ("Family") := NA_character_]
Data[IdTree %in% "b" & Year %in% 2000, ("Genus") := NA_character_]
Data[IdTree %in% "b", ("Family") := NA_character_]
Data[IdTree %in% "c" & Year %in% 2000, ("Species") := NA_character_]
Data[IdTree %in% "a" & Year %in% 2000, ("VernName") := NA_character_]
Data[IdTree %in% "d" & Year %in% 2000, ("VernName") := NA_character_]
## Special characters
Data[IdTree %in% "a", ("Family") := "Fabacé"] # good answer: "Fabaceae"
Data[IdTree %in% "c" & Year %in% 2003, ("Genus") := "Licanï_a"] # good answer: "Licania"
## Variant botanical informations per IdTree
Data[IdTree %in% "d" & Year %in% 2002, ("Species") := "grandi!flora"] # good answer: "falcata"
## Family name in the genus/species columns
Data[IdTree %in% "b", ("Species") := "Lecythidaceae"] # good answer: "sagotiana"
## Family & Scientific names unmatch
Data[IdTree %in% "c", ("Family") := "Lecythidaceae"] # good answer: "Chrysobalanaceae"
## Scientific & vernacular names unmatch
Data[IdTree %in% "d" & Year %in% 2001, ("VernName") := "leaf"]  # good answer: "wapa"
## Old scientific name (A trouver)
Data[, ScientificName := paste(Genus, Species)]
load("D:/VSC TmFO/Data/WFO_Backbone.rda")
rm(ScientificVernaTable)
load("D:/VSC TmFO/Data/WFO_Backbone.rda")
Source = "WFO"
WFOData = WFO_Backbone
# Data
if (!inherits(Data, c("data.table", "data.frame")))
stop("Data must be a data.frame or data.table")
# Source
Source <- match.arg(Source, choices = c("TPL", "WFO"))
# WFOData
if(Source == "WFO" & is.null(WFOData))
stop("You must provide the 'WFOData' argument,
a database as a static copy of the World Flora Online (WFO) Taxonomic Backbone,
when you choose Source = 'WFO'.")
# DetectOnly (logical)
if(!inherits(DetectOnly, "logical"))
stop("The 'DetectOnly' argument must be a logical")
DetectOnly = FALSE
# DetectOnly (logical)
if(!inherits(DetectOnly, "logical"))
stop("The 'DetectOnly' argument must be a logical")
setDT(Data) # data.frame to data.table
# Missing value ---------------------------------------------------------------------------------------------------------
# Family, ScientificName/Genus, species, VernName
Vars <- c("Family", "ScientificName", "Genus", "Species", "VernName")
for (v in 1:length(Vars)) {
if(Vars[v] %in% names(Data)){ # If the column exists
Data <- GenerateComment(Data,
condition = is.na(Data[,get(Vars[v])]),
comment = paste0("Missing value in ", Vars[v]))
}
}
# Data[Comment != ""] # to check
setDT(WFOData) # in data.table
WFOData[is.na(WFOData), ] <- "" # WFO.match doesn't take NA but ""
ScientificNames <- unique(Data[, list(ScientificName)]) # create data to use WorldFlora package (df, 1 col with scfic names)
setnames(ScientificNames, "ScientificName", "spec.name")
WFmatch <- WorldFlora::WFO.match(spec.data = ScientificNames, # data to correct
WFO.data = WFOData, # WFO data
Fuzzy.force = FALSE,
Fuzzy.shortest = TRUE,
verbose = FALSE)
library(TreeData)
library(data.table)
# Fabaceae Dicorynia guianensis (angelique) "a"
# Lecythidaceae Eschweilera sagotiana (maho noir) "b"
# Chrysobalanaceae Licania alba (koko) "c"
# Fabaceae Eperua falcata (wapa) "d"
Data <- data.table(Site = "Nowhere",
IdTree = c(rep("a", 4), rep("b", 4), rep("c", 4), rep("d", 4), rep("e", 1), rep("f", 1), rep("g", 1)), # 7 ind
Year = c(rep(c(2000:2003), 4), rep(2000, 3)) # 4 years each
)
Data <- Data[order(IdTree, Year)]
Data[, Family := c(rep("Fabaceae", 4), rep("Lecythidaceae", 4), rep("Chrysobalanaceae", 4), rep("Fabaceae", 4), rep("Sapindaceae", 1), rep("Clusiaceae", 1), rep("Burseraceae", 1))]
Data[, Genus := c(rep("Dicorynia", 4), rep("Eschweilera", 4), rep("Licania", 4), rep("Eperua", 4), rep("Indet.Sapindaceae", 1), rep("Tovomita", 1), rep("Protium", 1))]
Data[, Species := c(rep("guianensis", 4), rep("sagotiana", 4), rep("alba", 4), rep("falcata", 4), rep("Indet.", 1), rep("sp.5-CAY", 1), rep("opacum_subsp.rabelianum", 1))]
Data[, VernName := c(rep("angelique", 4), rep("maho noir", 4), rep("koko", 4), rep("wapa", 4), rep(NA, 3))]
# Create errors
## Missing value in  Family, ScientificName/Genus, species, VernName
Data[IdTree %in% "d" & Year %in% 2000, ("Family") := NA_character_]
Data[IdTree %in% "b" & Year %in% 2000, ("Genus") := NA_character_]
Data[IdTree %in% "b", ("Family") := NA_character_]
Data[IdTree %in% "c" & Year %in% 2000, ("Species") := NA_character_]
Data[IdTree %in% "a" & Year %in% 2000, ("VernName") := NA_character_]
Data[IdTree %in% "d" & Year %in% 2000, ("VernName") := NA_character_]
## Special characters
Data[IdTree %in% "a", ("Family") := "Fabacé"] # good answer: "Fabaceae"
Data[IdTree %in% "c" & Year %in% 2003, ("Genus") := "Licanï_a"] # good answer: "Licania"
## Variant botanical informations per IdTree
Data[IdTree %in% "d" & Year %in% 2002, ("Species") := "grandi!flora"] # good answer: "falcata"
## Family name in the genus/species columns
Data[IdTree %in% "b", ("Species") := "Lecythidaceae"] # good answer: "sagotiana"
## Family & Scientific names unmatch
Data[IdTree %in% "c", ("Family") := "Lecythidaceae"] # good answer: "Chrysobalanaceae"
## Scientific & vernacular names unmatch
Data[IdTree %in% "d" & Year %in% 2001, ("VernName") := "leaf"]  # good answer: "wapa"
## Old scientific name (A trouver)
Data[, ScientificName := paste(Genus, Species)]
devtools::load_all(".")
devtools::load_all(".")
library(TreeData)
load("D:/VSC TmFO/Data/WFO_Backbone.rda")
RsltWFO <- BotanicalCorrection(Data, Source = "WFO", WFOData = WFO_Backbone)
View(RsltWFO)
ScfcCorWFO <- unique(RsltWFO[, list(IdTree,
Genus, GenusCor,
Species, SpeciesCor,
ScientificName, ScientificNameCor,
Family, FamilyCor,
BotanicalCorrectionSource)
])
View(ScfcCorWFO)
ScfcCorWFO <- unique(RsltWFO[, list(IdTree,
Genus, GenusCor,
Species, SpeciesCor,
ScientificName, ScientificNameCor,
Family, FamilyCor, FamilyCorSource,
BotanicalCorrectionSource)
])
Source = "WFO"
if(Source == "WFO") FamCorSource <- "World Flora Online"
DataInput <- Data
Data <- RsltWFO
View(Data)
Data[Family != FamilyCor | (is.na(Family) & !is.na(FamilyCor)), FamilyCorSource := FamCorSource] # create the Source
View(Data)
Data[, VernNameCor := VernName]
BotaCols <- c("FamilyCor", "GenusCor", "SpeciesCor", "VernNameCor")
# Give the unique value (if it is unique) of the IdTree
for(j in BotaCols){
Data[,  (j) := ifelse(is.na(get(j)) & length(na.omit(unique(get(j)))) == 1,
na.omit(unique(get(j))), get(j)), keyby = IdTree]
}
View(Data)
duplicated_ID <- CorresIDs <- vector("character")
# For each site
for (s in unique(na.omit(Data$Site))) {
BotaIDCombination <- na.omit(unique(
Data[Data$Site == s, .(IdTree, FamilyCor, GenusCor, SpeciesCor, VernNameCor)]
))
CorresIDs <- BotaIDCombination[, IdTree] # .(IdTree) all the Idtree's having a unique X-Yutm) combination
if(!identical(CorresIDs, unique(CorresIDs))){ # check if it's the same length, same ids -> 1 asso/ID
duplicated_ID <- unique(CorresIDs[duplicated(CorresIDs)]) # identify the Idtree(s) having several P-SubP-TreeFieldNum combinations
Data <- GenerateComment(Data,
condition =
Data[,Site] == s
& Data[,IdTree] %in% duplicated_ID,
comment = "Different botanical informations (Family, ScientificName or VernName) for a same IdTree")
}
} # end site loop
Data[, ScientificNameCor := paste(GenusCor, SpeciesCor)]
Data[, ScientificNameCor := ifelse(ScientificNameCor == "NA NA", NA_character_, ScientificNameCor)]
View(Data)
devtools::load_all(".")
rm(Data, BotaIDCombination, DataInput, ScfcCorWFO, BotaCols, CorresIDs, duplicated_ID, FamCorSource, j, s)
rm(RsltWFO)
library(TreeData)
library(data.table)
# Fabaceae Dicorynia guianensis (angelique) "a"
# Lecythidaceae Eschweilera sagotiana (maho noir) "b"
# Chrysobalanaceae Licania alba (koko) "c"
# Fabaceae Eperua falcata (wapa) "d"
Data <- data.table(Site = "Nowhere",
IdTree = c(rep("a", 4), rep("b", 4), rep("c", 4), rep("d", 4), rep("e", 1), rep("f", 1), rep("g", 1)), # 7 ind
Year = c(rep(c(2000:2003), 4), rep(2000, 3)) # 4 years each
)
Data <- Data[order(IdTree, Year)]
Data[, Family := c(rep("Fabaceae", 4), rep("Lecythidaceae", 4), rep("Chrysobalanaceae", 4), rep("Fabaceae", 4), rep("Sapindaceae", 1), rep("Clusiaceae", 1), rep("Burseraceae", 1))]
Data[, Genus := c(rep("Dicorynia", 4), rep("Eschweilera", 4), rep("Licania", 4), rep("Eperua", 4), rep("Indet.Sapindaceae", 1), rep("Tovomita", 1), rep("Protium", 1))]
Data[, Species := c(rep("guianensis", 4), rep("sagotiana", 4), rep("alba", 4), rep("falcata", 4), rep("Indet.", 1), rep("sp.5-CAY", 1), rep("opacum_subsp.rabelianum", 1))]
Data[, VernName := c(rep("angelique", 4), rep("maho noir", 4), rep("koko", 4), rep("wapa", 4), rep(NA, 3))]
# Create errors
## Missing value in  Family, ScientificName/Genus, species, VernName
Data[IdTree %in% "d" & Year %in% 2000, ("Family") := NA_character_]
Data[IdTree %in% "b" & Year %in% 2000, ("Genus") := NA_character_]
Data[IdTree %in% "b", ("Family") := NA_character_]
Data[IdTree %in% "c" & Year %in% 2000, ("Species") := NA_character_]
Data[IdTree %in% "a" & Year %in% 2000, ("VernName") := NA_character_]
Data[IdTree %in% "d" & Year %in% 2000, ("VernName") := NA_character_]
## Special characters
Data[IdTree %in% "a", ("Family") := "Fabacé"] # good answer: "Fabaceae"
Data[IdTree %in% "c" & Year %in% 2003, ("Genus") := "Licanï_a"] # good answer: "Licania"
## Variant botanical informations per IdTree
Data[IdTree %in% "d" & Year %in% 2002, ("Species") := "grandi!flora"] # good answer: "falcata"
## Family name in the genus/species columns
Data[IdTree %in% "b", ("Species") := "Lecythidaceae"] # good answer: "sagotiana"
## Family & Scientific names unmatch
Data[IdTree %in% "c", ("Family") := "Lecythidaceae"] # good answer: "Chrysobalanaceae"
## Scientific & vernacular names unmatch
Data[IdTree %in% "d" & Year %in% 2001, ("VernName") := "leaf"]  # good answer: "wapa"
## Old scientific name (A trouver)
Data[, ScientificName := paste(Genus, Species)]
RsltWFO <- BotanicalCorrection(Data, Source = "WFO", WFOData = WFO_Backbone)
ScfcCorWFO <- unique(RsltWFO[, list(IdTree,
Genus, GenusCor,
Species, SpeciesCor,
ScientificName, ScientificNameCor,
Family, FamilyCor, FamilyCorSource,
BotanicalCorrectionSource)
])
devtools::load_all(".")
library(TreeData)
RsltWFO <- BotanicalCorrection(Data, Source = "WFO", WFOData = WFO_Backbone)
ScfcCorWFO <- unique(RsltWFO[, list(IdTree,
Genus, GenusCor,
Species, SpeciesCor,
ScientificName, ScientificNameCor,
Family, FamilyCor, FamilyCorSource,
BotanicalCorrectionSource)
])
View(RsltWFO)
load("C:/Users/Utilisateur/AppData/Local/ProjetsR/TreeData/R/RsltTPL.rda")
strsplit(RsltTPL$Genus, '[[:punct:]]')
class(strsplit(RsltTPL$Genus, '[[:punct:]]'))
unlist(strsplit(RsltTPL$Genus, '[[:punct:]]'))
unlist(strsplit(RsltTPL$Genus, '[[:punct:]]'))
strsplit(RsltTPL$Genus, '[[:punct:]]')
str(strsplit(RsltTPL$Genus, '[[:punct:]]'))
length(str(strsplit(RsltTPL$Genus, '[[:punct:]]')))
(length(strsplit(RsltTPL$Genus, '[[:punct:]]')))
strsplit(RsltTPL$Genus, '[[:punct:]]')
tstrsplit(RsltTPL$Genus, '[[:punct:]]')
library(data.table)
tstrsplit(RsltTPL$Genus, '[[:punct:]]')
RsltTPL[, c("GenusCor", "GenspFamily") := tstrsplit(Genus, '[[:punct:]]')]
View(RsltTPL)
RsltTPL[, c("GenusCor", "GenspFamily") := tstrsplit(Genus, "(?<=.)(?=[[:upper:]])", perl = T)]
View(RsltTPL)
# For species: split at space or underscore, and create SubSpecies
RsltTPL[, c("SpeciesCor", "SubSpecies") := tstrsplit(Species, '[[:blank:]]'| '_')]
# For species: split at space or underscore, and create SubSpecies
RsltTPL[, c("SpeciesCor", "SubSpecies") := tstrsplit(Species, c('[[:blank:]]', '_'))]
View(RsltTPL)
RsltTPL[, c("SpeciesCor", "SubSpecies") := tstrsplit(Species, '_')]
RsltTPL[, c("SpeciesCor", "SubSpecies") := tstrsplit(Species, '\\[[:blank:]] |\\_')]
View(RsltTPL)
load("C:/Users/Utilisateur/AppData/Local/ProjetsR/TreeData/R/RsltTPL.rda")
# For species: split at space or underscore, and create SubSpecies
RsltTPL[, c("SpeciesCor", "SubSpecies") := tstrsplit(Species, '\\[[:blank:]] | \\_')] # \\ devant une des possibilités
View(RsltTPL)
View(RsltTPL)
load("C:/Users/Utilisateur/AppData/Local/ProjetsR/TreeData/R/RsltTPL.rda")
# For species: split at space or underscore, and create SubSpecies
RsltTPL[, c("SpeciesCor", "SubSpecies") := tstrsplit(Species, '\\[[:blank:]] |\\_')] # \\ devant une des possibilités
View(RsltTPL)
strsplit("opacum_subsp.rabelianum", '\\[[:blank:]] |\\_') # \\ devant une des possibilités. Le manque d'espace après le barre du "ou" (|) est important, le résultat n'est pas le même sinon
strsplit("opacum_subsp.rabelianum", '\\[[:blank:]] | \\_') # \\ devant une des possibilités. Le manque d'espace après le barre du "ou" (|) est important, le résultat n'est pas le même sinon
Data <- RsltTPL
setDT(unique(paste(Data$GenusCor, Data$SpeciesCor)))
unique(paste(Data$GenusCor, Data$SpeciesCor))
View(RsltTPL)
data.table(unique(paste(Data$GenusCor, Data$SpeciesCor)))
setnames(ScientificNames, "V1", "spec.name")
ScientificNames <- data.table(unique(paste(Data$GenusCor, Data$SpeciesCor)))
setnames(ScientificNames, "V1", "spec.name")
ScientificNames
ScientificNames[, ScientificNameCor] <- paste(GenusCor, SpeciesCor)
ScientificNames <- Data[, ScientificNameCor = paste(GenusCor, SpeciesCor)]
devtools::load_all(".")
library(TreeData)
library(TreeData)
library(data.table)
# Fabaceae Dicorynia guianensis (angelique) "a"
# Lecythidaceae Eschweilera sagotiana (maho noir) "b"
# Chrysobalanaceae Licania alba (koko) "c"
# Fabaceae Eperua falcata (wapa) "d"
Data <- data.table(Site = "Nowhere",
IdTree = c(rep("a", 4), rep("b", 4), rep("c", 4), rep("d", 4), rep("e", 1), rep("f", 1), rep("g", 1)), # 7 ind
Year = c(rep(c(2000:2003), 4), rep(2000, 3)) # 4 years each
)
Data <- Data[order(IdTree, Year)]
Data[, Family := c(rep("Fabaceae", 4), rep("Lecythidaceae", 4), rep("Chrysobalanaceae", 4), rep("Fabaceae", 4), rep("Sapindaceae", 1), rep("Clusiaceae", 1), rep("Burseraceae", 1))]
Data[, Genus := c(rep("Dicorynia", 4), rep("Eschweilera", 4), rep("Licania", 4), rep("Eperua", 4), rep("Indet.Sapindaceae", 1), rep("Tovomita", 1), rep("Protium", 1))]
Data[, Species := c(rep("guianensis", 4), rep("sagotiana", 4), rep("alba", 4), rep("falcata", 4), rep("Indet.", 1), rep("sp.5-CAY", 1), rep("opacum_subsp.rabelianum", 1))]
Data[, VernName := c(rep("angelique", 4), rep("maho noir", 4), rep("koko", 4), rep("wapa", 4), rep(NA, 3))]
# Create errors
## Missing value in  Family, ScientificName/Genus, species, VernName
Data[IdTree %in% "d" & Year %in% 2000, ("Family") := NA_character_]
Data[IdTree %in% "b" & Year %in% 2000, ("Genus") := NA_character_]
Data[IdTree %in% "b", ("Family") := NA_character_]
Data[IdTree %in% "c" & Year %in% 2000, ("Species") := NA_character_]
Data[IdTree %in% "a" & Year %in% 2000, ("VernName") := NA_character_]
Data[IdTree %in% "d" & Year %in% 2000, ("VernName") := NA_character_]
## Special characters
Data[IdTree %in% "a", ("Family") := "Fabacé"] # good answer: "Fabaceae"
Data[IdTree %in% "c" & Year %in% 2003, ("Genus") := "Licanï_a"] # good answer: "Licania"
## Variant botanical informations per IdTree
Data[IdTree %in% "d" & Year %in% 2002, ("Species") := "grandi!flora"] # good answer: "falcata"
## Family name in the genus/species columns
Data[IdTree %in% "b", ("Species") := "Lecythidaceae"] # good answer: "sagotiana"
## Family & Scientific names unmatch
Data[IdTree %in% "c", ("Family") := "Lecythidaceae"] # good answer: "Chrysobalanaceae"
## Scientific & vernacular names unmatch
Data[IdTree %in% "d" & Year %in% 2001, ("VernName") := "leaf"]  # good answer: "wapa"
## Old scientific name (A trouver)
Data[, ScientificName := paste(Genus, Species)]
RsltTPL <- BotanicalCorrection(Data, Source = "TPL")
View(RsltTPL)
# Corrected columns initialisation --------------------------------------------------------------------------------------
Data[, GenusCor := Genus]
Data[, SpeciesCor := Species]
# Columns split if there is multiple information ------------------------------------------------------------------------
# For Genus: split at punctuation then at uppercase, and Create GenspFamily if family name in it
Data[, c("GenusCor", "GenspFamily") := tstrsplit(Genus, '[[:punct:]]')]
Data[, c("GenusCor", "GenspFamily") := tstrsplit(Genus, "(?<=.)(?=[[:upper:]])", perl = T)]
Data[grep("aceae", GenusCor),  c("GenusCor", "GenspFamily")] <- Data[grep("aceae", GenusCor), c("GenspFamily", "GenusCor")]
# Data[, GenspFamily := NA_character_]
# Data[grep("aceae", Genus), `:=`(GenspFamily = ifelse(is.na(Family), Genus, GenspFamily), GenusCor = NA_character_)]
Data[grep("aceae", SpeciesCor), `:=`(GenspFamily = ifelse(grep("aceae", SpeciesCor), SpeciesCor, GenspFamily), SpeciesCor = NA_character_)]
## Comment :
Data <- GenerateComment(Data,
condition = grepl("aceae", Data$Genus) | grepl("aceae", Data$Species),
comment = "Names ending in 'aceae' cannot be genus or species names")
# For species: split at space or underscore, and create SubSpecies
Data[, c("SpeciesCor", "SubSpecies") := tstrsplit(Species, '\\[[:blank:]] |\\_')] # \\ devant une des possibilités. Le manque d'espace après le barre du "ou" (|) est important, le résultat n'est pas le même sinon
View(Data)
View(RsltTPL)
# Data[, GenspFamily := NA_character_]
# Data[grep("aceae", Genus), `:=`(GenspFamily = ifelse(is.na(Family), Genus, GenspFamily), GenusCor = NA_character_)]
Data[grep("aceae", SpeciesCor), `:=`(GenspFamily = ifelse(grep("aceae", SpeciesCor), SpeciesCor, GenspFamily), SpeciesCor = NA_character_)]
View(Data)
# For species: split at space or underscore, and create SubSpecies
Data[, c("SpeciesCor", "SubSpecies") := tstrsplit(Species, '\\[[:blank:]] |\\_')] # \\ devant une des possibilités. Le manque d'espace après le barre du "ou" (|) est important, le résultat n'est pas le même sinon
Data[grep("aceae", SpeciesCor), `:=`(GenspFamily = ifelse(grep("aceae", SpeciesCor), SpeciesCor, GenspFamily),
SpeciesCor = NA_character_)]
## Comment :
Data <- GenerateComment(Data,
condition = grepl("aceae", Data$Genus) | grepl("aceae", Data$Species),
comment = "Names ending in 'aceae' cannot be genus or species names")
View(Data)
devtools::load_all(".")
library(TreeData)
library(data.table)
# Fabaceae Dicorynia guianensis (angelique) "a"
# Lecythidaceae Eschweilera sagotiana (maho noir) "b"
# Chrysobalanaceae Licania alba (koko) "c"
# Fabaceae Eperua falcata (wapa) "d"
Data <- data.table(Site = "Nowhere",
IdTree = c(rep("a", 4), rep("b", 4), rep("c", 4), rep("d", 4), rep("e", 1), rep("f", 1), rep("g", 1)), # 7 ind
Year = c(rep(c(2000:2003), 4), rep(2000, 3)) # 4 years each
)
Data <- Data[order(IdTree, Year)]
Data[, Family := c(rep("Fabaceae", 4), rep("Lecythidaceae", 4), rep("Chrysobalanaceae", 4), rep("Fabaceae", 4), rep("Sapindaceae", 1), rep("Clusiaceae", 1), rep("Burseraceae", 1))]
Data[, Genus := c(rep("Dicorynia", 4), rep("Eschweilera", 4), rep("Licania", 4), rep("Eperua", 4), rep("Indet.Sapindaceae", 1), rep("Tovomita", 1), rep("Protium", 1))]
Data[, Species := c(rep("guianensis", 4), rep("sagotiana", 4), rep("alba", 4), rep("falcata", 4), rep("Indet.", 1), rep("sp.5-CAY", 1), rep("opacum_subsp.rabelianum", 1))]
Data[, VernName := c(rep("angelique", 4), rep("maho noir", 4), rep("koko", 4), rep("wapa", 4), rep(NA, 3))]
# Create errors
## Missing value in  Family, ScientificName/Genus, species, VernName
Data[IdTree %in% "d" & Year %in% 2000, ("Family") := NA_character_]
Data[IdTree %in% "b" & Year %in% 2000, ("Genus") := NA_character_]
Data[IdTree %in% "b", ("Family") := NA_character_]
Data[IdTree %in% "c" & Year %in% 2000, ("Species") := NA_character_]
Data[IdTree %in% "a" & Year %in% 2000, ("VernName") := NA_character_]
Data[IdTree %in% "d" & Year %in% 2000, ("VernName") := NA_character_]
## Special characters
Data[IdTree %in% "a", ("Family") := "Fabacé"] # good answer: "Fabaceae"
Data[IdTree %in% "c" & Year %in% 2003, ("Genus") := "Licanï_a"] # good answer: "Licania"
## Variant botanical informations per IdTree
Data[IdTree %in% "d" & Year %in% 2002, ("Species") := "grandi!flora"] # good answer: "falcata"
## Family name in the genus/species columns
Data[IdTree %in% "b", ("Species") := "Lecythidaceae"] # good answer: "sagotiana"
## Family & Scientific names unmatch
Data[IdTree %in% "c", ("Family") := "Lecythidaceae"] # good answer: "Chrysobalanaceae"
## Scientific & vernacular names unmatch
Data[IdTree %in% "d" & Year %in% 2001, ("VernName") := "leaf"]  # good answer: "wapa"
## Old scientific name (A trouver)
Data[, ScientificName := paste(Genus, Species)]
library(TreeData)
library(TreeData)
library(data.table)
# Fabaceae Dicorynia guianensis (angelique) "a"
# Lecythidaceae Eschweilera sagotiana (maho noir) "b"
# Chrysobalanaceae Licania alba (koko) "c"
# Fabaceae Eperua falcata (wapa) "d"
Data <- data.table(Site = "Nowhere",
IdTree = c(rep("a", 4), rep("b", 4), rep("c", 4), rep("d", 4), rep("e", 1), rep("f", 1), rep("g", 1)), # 7 ind
Year = c(rep(c(2000:2003), 4), rep(2000, 3)) # 4 years each
)
Data <- Data[order(IdTree, Year)]
Data[, Family := c(rep("Fabaceae", 4), rep("Lecythidaceae", 4), rep("Chrysobalanaceae", 4), rep("Fabaceae", 4), rep("Sapindaceae", 1), rep("Clusiaceae", 1), rep("Burseraceae", 1))]
Data[, Genus := c(rep("Dicorynia", 4), rep("Eschweilera", 4), rep("Licania", 4), rep("Eperua", 4), rep("Indet.Sapindaceae", 1), rep("Tovomita", 1), rep("Protium", 1))]
Data[, Species := c(rep("guianensis", 4), rep("sagotiana", 4), rep("alba", 4), rep("falcata", 4), rep("Indet.", 1), rep("sp.5-CAY", 1), rep("opacum_subsp.rabelianum", 1))]
Data[, VernName := c(rep("angelique", 4), rep("maho noir", 4), rep("koko", 4), rep("wapa", 4), rep(NA, 3))]
# Create errors
## Missing value in  Family, ScientificName/Genus, species, VernName
Data[IdTree %in% "d" & Year %in% 2000, ("Family") := NA_character_]
Data[IdTree %in% "b" & Year %in% 2000, ("Genus") := NA_character_]
Data[IdTree %in% "b", ("Family") := NA_character_]
Data[IdTree %in% "c" & Year %in% 2000, ("Species") := NA_character_]
Data[IdTree %in% "a" & Year %in% 2000, ("VernName") := NA_character_]
Data[IdTree %in% "d" & Year %in% 2000, ("VernName") := NA_character_]
## Special characters
Data[IdTree %in% "a", ("Family") := "Fabacé"] # good answer: "Fabaceae"
Data[IdTree %in% "c" & Year %in% 2003, ("Genus") := "Licanï_a"] # good answer: "Licania"
## Variant botanical informations per IdTree
Data[IdTree %in% "d" & Year %in% 2002, ("Species") := "grandi!flora"] # good answer: "falcata"
## Family name in the genus/species columns
Data[IdTree %in% "b", ("Species") := "Lecythidaceae"] # good answer: "sagotiana"
## Family & Scientific names unmatch
Data[IdTree %in% "c", ("Family") := "Lecythidaceae"] # good answer: "Chrysobalanaceae"
## Scientific & vernacular names unmatch
Data[IdTree %in% "d" & Year %in% 2001, ("VernName") := "leaf"]  # good answer: "wapa"
## Old scientific name (A trouver)
Data[, ScientificName := paste(Genus, Species)]
RsltTPL <- BotanicalCorrection(Data, Source = "TPL")
View(RsltTPL)
# Special characters only for Genus: remove : !"#$%&’()*+,-./:;<=>?@[]^_`{|}~ ----------------------------------------------------------
Data[, GenusCor := gsub("[[:punct:]]", "", Data$GenusCor)]
## Comment :
Data <- GenerateComment(Data,
condition = grepl('[[:punct:]]', Data$Genus), # TRUE if there are any special character
comment = "Special characters in the 'Genus'")
View(Data)
devtools::load_all(".")
library(TreeData)
library(TreeData)
library(data.table)
# Fabaceae Dicorynia guianensis (angelique) "a"
# Lecythidaceae Eschweilera sagotiana (maho noir) "b"
# Chrysobalanaceae Licania alba (koko) "c"
# Fabaceae Eperua falcata (wapa) "d"
Data <- data.table(Site = "Nowhere",
IdTree = c(rep("a", 4), rep("b", 4), rep("c", 4), rep("d", 4), rep("e", 1), rep("f", 1), rep("g", 1)), # 7 ind
Year = c(rep(c(2000:2003), 4), rep(2000, 3)) # 4 years each
)
Data <- Data[order(IdTree, Year)]
Data[, Family := c(rep("Fabaceae", 4), rep("Lecythidaceae", 4), rep("Chrysobalanaceae", 4), rep("Fabaceae", 4), rep("Sapindaceae", 1), rep("Clusiaceae", 1), rep("Burseraceae", 1))]
Data[, Genus := c(rep("Dicorynia", 4), rep("Eschweilera", 4), rep("Licania", 4), rep("Eperua", 4), rep("Indet.Sapindaceae", 1), rep("Tovomita", 1), rep("Protium", 1))]
Data[, Species := c(rep("guianensis", 4), rep("sagotiana", 4), rep("alba", 4), rep("falcata", 4), rep("Indet.", 1), rep("sp.5-CAY", 1), rep("opacum_subsp.rabelianum", 1))]
Data[, VernName := c(rep("angelique", 4), rep("maho noir", 4), rep("koko", 4), rep("wapa", 4), rep(NA, 3))]
# Create errors
## Missing value in  Family, ScientificName/Genus, species, VernName
Data[IdTree %in% "d" & Year %in% 2000, ("Family") := NA_character_]
Data[IdTree %in% "b" & Year %in% 2000, ("Genus") := NA_character_]
Data[IdTree %in% "b", ("Family") := NA_character_]
Data[IdTree %in% "c" & Year %in% 2000, ("Species") := NA_character_]
Data[IdTree %in% "a" & Year %in% 2000, ("VernName") := NA_character_]
Data[IdTree %in% "d" & Year %in% 2000, ("VernName") := NA_character_]
## Special characters
Data[IdTree %in% "a", ("Family") := "Fabacé"] # good answer: "Fabaceae"
Data[IdTree %in% "c" & Year %in% 2003, ("Genus") := "Licanï_a"] # good answer: "Licania"
## Variant botanical informations per IdTree
Data[IdTree %in% "d" & Year %in% 2002, ("Species") := "grandi!flora"] # good answer: "falcata"
## Family name in the genus/species columns
Data[IdTree %in% "b", ("Species") := "Lecythidaceae"] # good answer: "sagotiana"
## Family & Scientific names unmatch
Data[IdTree %in% "c", ("Family") := "Lecythidaceae"] # good answer: "Chrysobalanaceae"
## Scientific & vernacular names unmatch
Data[IdTree %in% "d" & Year %in% 2001, ("VernName") := "leaf"]  # good answer: "wapa"
## Old scientific name (A trouver)
Data[, ScientificName := paste(Genus, Species)]
RsltTPL <- BotanicalCorrection(Data, Source = "TPL")
View(RsltTPL)
devtools::load_all(".")
library(TreeData)
